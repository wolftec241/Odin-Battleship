(()=>{"use strict";var n={106:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([n.id,"*{\n    --water-blue: #3ea4f0;\n    --water-blue-hover:#0a6bbf;\n    --ship-color: #444444;\n    --hit-color: #ff6b6b;\n    --miss-color: #c5c5c5;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f0f0f0;\n}\n\n.main-window{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\nheader{\n    width: 100vw;\n    min-width: 350px;\n    text-align: center;\n    border-bottom: grey solid 2px;\n    align-self: center;\n}\n\n.title{\n    font-size: 2rem;\n    margin: 0;\n    padding: 1rem;\n    background-color: var(--water-blue);\n}\n\n#app{\n    display: flex;\n    flex-direction: column;\n    \n}\n\n#new-game-btn{\n    font-size: 1.5rem;\n    font-weight: bold;\n    text-align: center;\n    margin-top: 1rem;\n    padding: 0.3rem;\n    background-color: var(--water-blue);\n    width: 8rem;\n    align-self: center;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#new-game-btn:hover{\n    background-color: var(--water-blue-hover);\n}\n\n.game-container {\n    display: flex;\n    gap: 3rem;\n    width: 80vw;\n    justify-content: center;\n    flex-flow: row wrap;\n    margin-bottom: 2rem;\n}\n\n.board-container {\n    text-align: center;\n}\n\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    border: 1px solid ;\n    width: 350px;\n    height: 350px;\n}\n\n.cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    \n}\n\n#enemy-board > .cell:hover{\n    background-color: var(--water-blue-hover);\n    cursor: pointer;\n}\n\n.ship {\n    background-color: var(--ship-color);\n}\n\n.hit {\n    background-color: var(--hit-color);\n    cursor: none;\n    pointer-events: none;\n}\n\n.miss {\n    background-color: var(--miss-color);\n    cursor: none;\n    pointer-events: none;\n}\n\n#finale-result{\n    font-size: 3rem;\n    font-weight: bold;\n    text-align: center;\n    background-color: var(--water-blue);\n    align-self: center;\n    width: 20rem;\n    border-radius: 5px;\n}\n\n/* Ship Placement window */\n.placement-window {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.3);\n    z-index: 1000;\n}\n\n.placement-cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    cursor: pointer;\n}\n\n.placement-cell.preview {\n    background-color: rgba(0, 255, 0, 0.3);\n}\n\n.placement-cell.invalid-preview {\n    background-color: rgb(255, 0, 0);\n}\n\n.placement-cell.ship-placed {\n    background-color: var(--ship-color);\n}\n\n.placement-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.non-interactive {\n    pointer-events: none;\n    filter: blur(10px);\n}\n","",{version:3,sources:["webpack://./src/style/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,0BAA0B;IAC1B,qBAAqB;IACrB,oBAAoB;IACpB,qBAAqB;AACzB;;AAEA;IACI,8BAA8B;IAC9B,SAAS;IACT,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,SAAS;IACT,aAAa;IACb,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,sBAAsB;;AAE1B;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,mCAAmC;IACnC,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,SAAS;IACT,WAAW;IACX,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,kBAAkB;IAClB,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,mCAAmC;IACnC,uBAAuB;IACvB,eAAe;;AAEnB;;AAEA;IACI,yCAAyC;IACzC,eAAe;AACnB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,kCAAkC;IAClC,YAAY;IACZ,oBAAoB;AACxB;;AAEA;IACI,mCAAmC;IACnC,YAAY;IACZ,oBAAoB;AACxB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,mCAAmC;IACnC,kBAAkB;IAClB,YAAY;IACZ,kBAAkB;AACtB;;AAEA,0BAA0B;AAC1B;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,oCAAoC;IACpC,aAAa;AACjB;;AAEA;IACI,mCAAmC;IACnC,uBAAuB;IACvB,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;AACtB",sourcesContent:["*{\n    --water-blue: #3ea4f0;\n    --water-blue-hover:#0a6bbf;\n    --ship-color: #444444;\n    --hit-color: #ff6b6b;\n    --miss-color: #c5c5c5;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f0f0f0;\n}\n\n.main-window{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\nheader{\n    width: 100vw;\n    min-width: 350px;\n    text-align: center;\n    border-bottom: grey solid 2px;\n    align-self: center;\n}\n\n.title{\n    font-size: 2rem;\n    margin: 0;\n    padding: 1rem;\n    background-color: var(--water-blue);\n}\n\n#app{\n    display: flex;\n    flex-direction: column;\n    \n}\n\n#new-game-btn{\n    font-size: 1.5rem;\n    font-weight: bold;\n    text-align: center;\n    margin-top: 1rem;\n    padding: 0.3rem;\n    background-color: var(--water-blue);\n    width: 8rem;\n    align-self: center;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#new-game-btn:hover{\n    background-color: var(--water-blue-hover);\n}\n\n.game-container {\n    display: flex;\n    gap: 3rem;\n    width: 80vw;\n    justify-content: center;\n    flex-flow: row wrap;\n    margin-bottom: 2rem;\n}\n\n.board-container {\n    text-align: center;\n}\n\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    border: 1px solid ;\n    width: 350px;\n    height: 350px;\n}\n\n.cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    \n}\n\n#enemy-board > .cell:hover{\n    background-color: var(--water-blue-hover);\n    cursor: pointer;\n}\n\n.ship {\n    background-color: var(--ship-color);\n}\n\n.hit {\n    background-color: var(--hit-color);\n    cursor: none;\n    pointer-events: none;\n}\n\n.miss {\n    background-color: var(--miss-color);\n    cursor: none;\n    pointer-events: none;\n}\n\n#finale-result{\n    font-size: 3rem;\n    font-weight: bold;\n    text-align: center;\n    background-color: var(--water-blue);\n    align-self: center;\n    width: 20rem;\n    border-radius: 5px;\n}\n\n/* Ship Placement window */\n.placement-window {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.3);\n    z-index: 1000;\n}\n\n.placement-cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    cursor: pointer;\n}\n\n.placement-cell.preview {\n    background-color: rgba(0, 255, 0, 0.3);\n}\n\n.placement-cell.invalid-preview {\n    background-color: rgb(255, 0, 0);\n}\n\n.placement-cell.ship-placed {\n    background-color: var(--ship-color);\n}\n\n.placement-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.non-interactive {\n    pointer-events: none;\n    filter: blur(10px);\n}\n"],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var u=t(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var h=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:h,references:1})}i.push(A)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=r(n,o),c=0;c<a.length;c++){var d=t(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=l}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var r=t(72),o=t.n(r),a=t(825),i=t.n(a),s=t(659),l=t.n(s),c=t(56),d=t.n(c),A=t(540),u=t.n(A),p=t(113),h=t.n(p),m=t(106),f={};f.styleTagTransform=h(),f.setAttributes=d(),f.insert=l().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=u(),o()(m.A,f),m.A&&m.A.locals&&m.A.locals;class C{constructor(n,e,t){this.name=n,this.shipLength=e,this.numberOfHits=0,this.sunk=!1,this.orientation=t}getLength(){return this.shipLength}getName(){return this.name}getNumberOfHits(){return this.numberOfHits}isSunk(){return this.sunk}getHit(){this.numberOfHits++,this.numberOfHits>=this.shipLength&&(this.sunk=!0)}isVertical(){return"vertical"===this.orientation}}class g{constructor(n){this.ships=[],this.GRID_SIZE=10,this.numberOfShips=0,this.name=n,this.board=[],this.missedShots=[],this.initialize()}initialize(){for(let n=0;n<this.GRID_SIZE;n++){this.board[n]=[],this.missedShots[n]=[];for(let e=0;e<this.GRID_SIZE;e++)this.board[n][e]=null,this.missedShots[n][e]=null}}getName(){return this.name}placeShip(n,e,t){let r=[];if(!0===n.isVertical()){if(t+n.getLength()>this.GRID_SIZE||e<0||t<0)return!1;for(let r=0;r<n.getLength();r++)if(!this.isCellAvailable(e,t+r))return!1;for(let o=0;o<n.getLength();o++)this.board[e][t+o]=n,r.push([e,t+o])}else if(!1===n.isVertical()){if(e+n.getLength()>this.GRID_SIZE||e<0||t<0)return!1;for(let r=0;r<n.getLength();r++)if(!this.isCellAvailable(e+r,t))return!1;for(let o=0;o<n.getLength();o++)this.board[e+o][t]=n,r.push([e+o,t])}return this.ships.push({ship:n,places:r}),this.numberOfShips++,!0}isWithinBounds(n,e){return n>=0&&n<this.GRID_SIZE&&e>=0&&e<this.GRID_SIZE}isCellAvailable(n,e){if(null!==this.board[n][e])return!1;for(let t=-1;t<=1;t++)for(let r=-1;r<=1;r++){const o=n+t,a=e+r;if(this.isWithinBounds(o,a)&&null!==this.board[o][a])return!1}return!0}getShipAt(n,e){return this.board[n][e]}receiveAttack(n,e){let t=this.getShipAt(n,e);return console.log(this.numberOfShips),null===t?(this.missedShots[n][e]=!0,!1):(t.getHit(),t.isSunk()&&(this.numberOfShips--,this.markAdjacentCells(t)),!0)}markAdjacentCells(n){const e=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];this.ships.forEach((t=>{t.ship===n&&t.places.forEach((t=>{e.forEach((([e,r])=>{const o=t[0]+e,a=t[1]+r;this.isWithinBounds(o,a)&&this.getShipAt(o,a)!==n&&(this.missedShots[o][a]=!0)}))}))}))}getAllMissedCells(){let n=[];for(let e=0;e<this.GRID_SIZE;e++)for(let t=0;t<this.GRID_SIZE;t++)this.missedShots[e][t]&&n.push([e,t]);return n}getMissedShots(){return this.missedShots}allShipsSunk(){return this.numberOfShips<=0}placeShipsRandomly(){[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}].forEach((n=>{let e=!1;for(;!e;){const t=Math.floor(Math.random()*this.GRID_SIZE),r=Math.floor(Math.random()*this.GRID_SIZE),o=Math.random()<.5?"horizontal":"vertical",a=new C(n.name,n.length,o);this.placeShip(a,t,r)&&(e=!0)}}))}}class b{constructor(n){this.opponentBoard=n,this.GRID_SIZE=10,this.lastHit=null,this.potentialTargets=[],this.attackedCells=new Set}makeMove(){let n;return n=this.lastHit&&this.potentialTargets.length>0?this.targetAdjacentCells():this.randomMove(),this.attackedCells.add(`${n[0]},${n[1]}`),n}targetAdjacentCells(){for(;this.potentialTargets.length>0;){const n=this.potentialTargets.pop();if(!this.attackedCells.has(`${n[0]},${n[1]}`))return this.opponentBoard.receiveAttack(n[0],n[1])&&(this.lastHit=n,this.addAdjacentCells(n)),n}return this.lastHit=null,this.randomMove()}randomMove(){let n;do{n=[Math.floor(Math.random()*this.GRID_SIZE),Math.floor(Math.random()*this.GRID_SIZE)]}while(this.attackedCells.has(`${n[0]},${n[1]}`));return this.opponentBoard.receiveAttack(n[0],n[1])&&(this.lastHit=n,this.addAdjacentCells(n)),n}addAdjacentCells(n){const[e,t]=n,r=[[e-1,t],[e+1,t],[e,t-1],[e,t+1]];this.potentialTargets=r.filter((([n,e])=>n>=0&&n<this.GRID_SIZE&&e>=0&&e<this.GRID_SIZE&&!this.attackedCells.has(`${n},${e}`))).concat(this.potentialTargets)}}function v(){const n=10;let e,t,r,o;function a(e,t){const r=document.getElementById(`${e}-board`);if(r){r.innerHTML="",r.classList.add("board");for(let o=0;o<n;o++)for(let a=0;a<n;a++){const n=document.createElement("div");n.classList.add("cell"),n.classList.add(`${e}-cell`),n.dataset.row=a.toString(),n.dataset.col=o.toString(),"enemy"===e&&n.addEventListener("click",(()=>i(o,a,t,n))),r.appendChild(n)}}}function i(n,e,t,r){if(o&&!r.classList.contains("hit")&&!r.classList.contains("miss"))if(t.receiveAttack(n,e)){r.classList.add("hit");const o=t.getShipAt(n,e);if(o&&o.isSunk()&&(console.log(o.getName()+" is sunk"),c("enemy",t)),t.allShipsSunk())return void u(t);setTimeout(s,500)}else r.classList.add("miss"),o=!1,setTimeout(l,500)}function s(){o=!0}function l(){if(o)return;const[n,t]=r.makeMove(),a=document.querySelector(`.player-cell[data-col="${n}"][data-row="${t}"]`);if(e.getShipAt(n,t)){if(a.classList.add("hit"),c("player",e),e.allShipsSunk())return void u(e);setTimeout(l,500)}else a.classList.add("miss"),c("player",e),o=!0,s()}function c(e,t){const r=document.getElementById(`${e}-board`);if(!r)return;const o=r.querySelectorAll(".cell");t.getAllMissedCells().forEach((([e,t])=>{o[e*n+t].classList.add("miss")}))}function d(){document.querySelectorAll(".game-container").forEach((n=>{n.remove()}));const n=document.createElement("div");n.classList.add("game-container");const i=A("Player"),s=A("Enemy");n.appendChild(i),n.appendChild(s),(document.getElementById("app")||document.body).appendChild(n),e=new g("player"),t=new g("enemy"),r=new b(e),a("player",e),t.placeShipsRandomly(),function(n,e){document.querySelector(".main-window").classList.add("non-interactive");const t=10,r=[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}];let o=0,a="vertical";function i(){o=0,n=new g("player"),document.querySelectorAll(".placement-cell").forEach((n=>{n.classList.remove("ship-placed")}))}function s(){n.placeShipsRandomly(),p()}function l(){a="horizontal"===a?"vertical":"horizontal"}function c(e,i){const s=r[o],l=new C(s.name,s.length,a);n.placeShip(l,e,i)&&(function(n,e){const i=r[o],s=document.querySelectorAll(".placement-cell");if("vertical"==a)for(let r=0;r<i.length;r++)s[n*t+(e+r)].classList.add("ship-placed");if("horizontal"==a)for(let r=0;r<i.length;r++)s[(n+r)*t+e].classList.add("ship-placed")}(e,i),o++,o>=r.length&&p())}function d(n,e){u();const i=r[o],s=document.querySelectorAll(".placement-cell");for(let r=0;r<i.length;r++){const o="vertical"===a?e+r:e,l="horizontal"===a?n+r:n;if(o<t&&l<t){const r=l*t+o;A(e,n,i.length)?s[r].classList.add("preview"):s[r].classList.add("invalid-preview")}}}function A(n,e,r){return"horizontal"===a?e+r<=t:n+r<=t}function u(){document.querySelectorAll(".placement-cell").forEach((n=>{n.classList.remove("preview"),n.classList.remove("invalid-preview")}))}function p(){const r=document.querySelector(".placement-window");r&&r.remove(),document.querySelector(".main-window").classList.remove("non-interactive"),function(){const e=document.getElementById("player-board");if(!e)return;const r=e.querySelectorAll(".cell");for(let e=0;e<t;e++)for(let o=0;o<t;o++)n.getShipAt(e,o)&&r[e*t+o].classList.add("ship")}(),e()}!function(){const n=document.createElement("div");n.classList.add("placement-window");const e=document.createElement("h2");e.textContent="Place Your Ships",n.appendChild(e);const r=function(){const n=document.createElement("div");n.classList.add("board"),n.classList.add("placement-board");for(let e=0;e<t;e++)for(let r=0;r<t;r++){const t=document.createElement("div");t.classList.add("placement-cell"),t.dataset.row=r.toString(),t.dataset.col=e.toString(),t.addEventListener("click",(()=>c(e,r))),t.addEventListener("mouseover",(()=>d(e,r))),t.addEventListener("mouseout",u),n.appendChild(t)}return n}();n.appendChild(r);const o=function(){const n=document.createElement("div");n.classList.add("placement-controls");const e=document.createElement("button");e.textContent="Rotate Ship",e.addEventListener("click",l),n.appendChild(e);const t=document.createElement("button");t.textContent="Randomize",t.addEventListener("click",s),n.appendChild(t);const r=document.createElement("button");return r.textContent="Restart",r.addEventListener("click",i),n.appendChild(r),n}();n.appendChild(o),document.body.insertBefore(n,document.body.firstChild)}()}(e,(()=>{a("enemy",t),o=!0}))}function A(n){const e=document.createElement("div");e.classList.add("board-container");const t=document.createElement("h2");t.textContent=`${n} board`;const r=document.createElement("div");return r.id=`${n.toLowerCase()}-board`,r.classList.add("board"),e.appendChild(t),e.appendChild(r),e}function u(n){const e=document.querySelector(".game-container"),t=document.getElementById("finale-result");"player"===n.getName()?t.textContent="Player Lose":t.textContent="Player Win",e.style.pointerEvents="none"}return{startUp:function(){d();const n=document.getElementById("new-game-btn");n?n.addEventListener("click",d):console.error("New game button not found")}}}document.addEventListener("DOMContentLoaded",(()=>{v().startUp()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3N0eWxlL3N0eWxlLmNzcz9jOWYwIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL1NoaXAudHMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvR2FtZWJvYXJkLnRzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL0VuZW15QWkudHMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvRG9tLnRzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL1NoaXBQbGFjZW1lbnRXaW5kb3cudHMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqe1xuICAgIC0td2F0ZXItYmx1ZTogIzNlYTRmMDtcbiAgICAtLXdhdGVyLWJsdWUtaG92ZXI6IzBhNmJiZjtcbiAgICAtLXNoaXAtY29sb3I6ICM0NDQ0NDQ7XG4gICAgLS1oaXQtY29sb3I6ICNmZjZiNmI7XG4gICAgLS1taXNzLWNvbG9yOiAjYzVjNWM1O1xufVxuXG5ib2R5IHtcbiAgICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcbn1cblxuLm1haW4td2luZG93e1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG5oZWFkZXJ7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICAgIG1pbi13aWR0aDogMzUwcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJvcmRlci1ib3R0b206IGdyZXkgc29saWQgMnB4O1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbn1cblxuLnRpdGxle1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMXJlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcbn1cblxuI2FwcHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgXG59XG5cbiNuZXctZ2FtZS1idG57XG4gICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgcGFkZGluZzogMC4zcmVtO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xuICAgIHdpZHRoOiA4cmVtO1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4jbmV3LWdhbWUtYnRuOmhvdmVye1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUtaG92ZXIpO1xufVxuXG4uZ2FtZS1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ2FwOiAzcmVtO1xuICAgIHdpZHRoOiA4MHZ3O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcbn1cblxuLmJvYXJkLWNvbnRhaW5lciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uYm9hcmQge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIDFmcik7XG4gICAgYm9yZGVyOiAxcHggc29saWQgO1xuICAgIHdpZHRoOiAzNTBweDtcbiAgICBoZWlnaHQ6IDM1MHB4O1xufVxuXG4uY2VsbCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZSk7XG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgYXNwZWN0LXJhdGlvOiAxO1xuICAgIFxufVxuXG4jZW5lbXktYm9hcmQgPiAuY2VsbDpob3ZlcntcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlLWhvdmVyKTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5zaGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zaGlwLWNvbG9yKTtcbn1cblxuLmhpdCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taGl0LWNvbG9yKTtcbiAgICBjdXJzb3I6IG5vbmU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5taXNzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1taXNzLWNvbG9yKTtcbiAgICBjdXJzb3I6IG5vbmU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbiNmaW5hbGUtcmVzdWx0e1xuICAgIGZvbnQtc2l6ZTogM3JlbTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZSk7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIHdpZHRoOiAyMHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG59XG5cbi8qIFNoaXAgUGxhY2VtZW50IHdpbmRvdyAqL1xuLnBsYWNlbWVudC13aW5kb3cge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwwLDAsMC4zKTtcbiAgICB6LWluZGV4OiAxMDAwO1xufVxuXG4ucGxhY2VtZW50LWNlbGwge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgIGFzcGVjdC1yYXRpbzogMTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5wbGFjZW1lbnQtY2VsbC5wcmV2aWV3IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDI1NSwgMCwgMC4zKTtcbn1cblxuLnBsYWNlbWVudC1jZWxsLmludmFsaWQtcHJldmlldyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMCwgMCk7XG59XG5cbi5wbGFjZW1lbnQtY2VsbC5zaGlwLXBsYWNlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2hpcC1jb2xvcik7XG59XG5cbi5wbGFjZW1lbnQtY29udHJvbHMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5ub24taW50ZXJhY3RpdmUge1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGZpbHRlcjogYmx1cigxMHB4KTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHFCQUFxQjtJQUNyQiwwQkFBMEI7SUFDMUIscUJBQXFCO0lBQ3JCLG9CQUFvQjtJQUNwQixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSw4QkFBOEI7SUFDOUIsU0FBUztJQUNULFVBQVU7SUFDVix5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQiw2QkFBNkI7SUFDN0Isa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLFNBQVM7SUFDVCxhQUFhO0lBQ2IsbUNBQW1DO0FBQ3ZDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjs7QUFFMUI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLG1DQUFtQztJQUNuQyxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixlQUFlO0FBQ25COztBQUVBO0lBQ0kseUNBQXlDO0FBQzdDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLFNBQVM7SUFDVCxXQUFXO0lBQ1gsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0NBQXNDO0lBQ3RDLG1DQUFtQztJQUNuQyxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxtQ0FBbUM7SUFDbkMsdUJBQXVCO0lBQ3ZCLGVBQWU7O0FBRW5COztBQUVBO0lBQ0kseUNBQXlDO0lBQ3pDLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxtQ0FBbUM7QUFDdkM7O0FBRUE7SUFDSSxrQ0FBa0M7SUFDbEMsWUFBWTtJQUNaLG9CQUFvQjtBQUN4Qjs7QUFFQTtJQUNJLG1DQUFtQztJQUNuQyxZQUFZO0lBQ1osb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsbUNBQW1DO0lBQ25DLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osa0JBQWtCO0FBQ3RCOztBQUVBLDBCQUEwQjtBQUMxQjtJQUNJLGVBQWU7SUFDZixRQUFRO0lBQ1IsU0FBUztJQUNULGdDQUFnQztJQUNoQyx1QkFBdUI7SUFDdkIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixvQ0FBb0M7SUFDcEMsYUFBYTtBQUNqQjs7QUFFQTtJQUNJLG1DQUFtQztJQUNuQyx1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxzQ0FBc0M7QUFDMUM7O0FBRUE7SUFDSSxnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxtQ0FBbUM7QUFDdkM7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKntcXG4gICAgLS13YXRlci1ibHVlOiAjM2VhNGYwO1xcbiAgICAtLXdhdGVyLWJsdWUtaG92ZXI6IzBhNmJiZjtcXG4gICAgLS1zaGlwLWNvbG9yOiAjNDQ0NDQ0O1xcbiAgICAtLWhpdC1jb2xvcjogI2ZmNmI2YjtcXG4gICAgLS1taXNzLWNvbG9yOiAjYzVjNWM1O1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcblxcbi5tYWluLXdpbmRvd3tcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbmhlYWRlcntcXG4gICAgd2lkdGg6IDEwMHZ3O1xcbiAgICBtaW4td2lkdGg6IDM1MHB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJvcmRlci1ib3R0b206IGdyZXkgc29saWQgMnB4O1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxufVxcblxcbi50aXRsZXtcXG4gICAgZm9udC1zaXplOiAycmVtO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDFyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xcbn1cXG5cXG4jYXBwe1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBcXG59XFxuXFxuI25ldy1nYW1lLWJ0bntcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIG1hcmdpbi10b3A6IDFyZW07XFxuICAgIHBhZGRpbmc6IDAuM3JlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZSk7XFxuICAgIHdpZHRoOiA4cmVtO1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4jbmV3LWdhbWUtYnRuOmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlLWhvdmVyKTtcXG59XFxuXFxuLmdhbWUtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiAzcmVtO1xcbiAgICB3aWR0aDogODB2dztcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XFxuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XFxufVxcblxcbi5ib2FyZC1jb250YWluZXIge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5ib2FyZCB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgMWZyKTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgO1xcbiAgICB3aWR0aDogMzUwcHg7XFxuICAgIGhlaWdodDogMzUwcHg7XFxufVxcblxcbi5jZWxsIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZSk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgICBhc3BlY3QtcmF0aW86IDE7XFxuICAgIFxcbn1cXG5cXG4jZW5lbXktYm9hcmQgPiAuY2VsbDpob3ZlcntcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZS1ob3Zlcik7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNoaXAge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zaGlwLWNvbG9yKTtcXG59XFxuXFxuLmhpdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpdC1jb2xvcik7XFxuICAgIGN1cnNvcjogbm9uZTtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5taXNzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlzcy1jb2xvcik7XFxuICAgIGN1cnNvcjogbm9uZTtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbiNmaW5hbGUtcmVzdWx0e1xcbiAgICBmb250LXNpemU6IDNyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIHdpZHRoOiAyMHJlbTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG5cXG4vKiBTaGlwIFBsYWNlbWVudCB3aW5kb3cgKi9cXG4ucGxhY2VtZW50LXdpbmRvdyB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgdG9wOiA1MCU7XFxuICAgIGxlZnQ6IDUwJTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsMCwwLDAuMyk7XFxuICAgIHotaW5kZXg6IDEwMDA7XFxufVxcblxcbi5wbGFjZW1lbnQtY2VsbCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gICAgYXNwZWN0LXJhdGlvOiAxO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5wbGFjZW1lbnQtY2VsbC5wcmV2aWV3IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAyNTUsIDAsIDAuMyk7XFxufVxcblxcbi5wbGFjZW1lbnQtY2VsbC5pbnZhbGlkLXByZXZpZXcge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAwLCAwKTtcXG59XFxuXFxuLnBsYWNlbWVudC1jZWxsLnNoaXAtcGxhY2VkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2hpcC1jb2xvcik7XFxufVxcblxcbi5wbGFjZW1lbnQtY29udHJvbHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5ub24taW50ZXJhY3RpdmUge1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgZmlsdGVyOiBibHVyKDEwcHgpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8vIFNoaXAgY2xhc3MgcmVwcmVzZW50cyBhIHNoaXAgaW4gdGhlIEJhdHRsZXNoaXAgZ2FtZVxuZXhwb3J0IGNsYXNzIFNoaXAge1xuICAgIC8vIENvbnN0cnVjdG9yIGluaXRpYWxpemVzIGEgc2hpcCB3aXRoIGEgZ2l2ZW4gbGVuZ3RoXG4gICAgY29uc3RydWN0b3IobmFtZSwgbGVuZ3RoLCBvcmllbnRhdGlvbikge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnNoaXBMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMubnVtYmVyT2ZIaXRzID0gMDtcbiAgICAgICAgdGhpcy5zdW5rID0gZmFsc2U7XG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBzaGlwXG4gICAgZ2V0TGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGlwTGVuZ3RoO1xuICAgIH1cbiAgICBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBudW1iZXIgb2YgaGl0cyB0aGUgc2hpcCBoYXMgdGFrZW5cbiAgICBnZXROdW1iZXJPZkhpdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm51bWJlck9mSGl0cztcbiAgICB9XG4gICAgLy8gQ2hlY2tzIGlmIHRoZSBzaGlwIGlzIHN1bmtcbiAgICBpc1N1bmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1bms7XG4gICAgfVxuICAgIC8vIFJlZ2lzdGVycyBhIGhpdCBvbiB0aGUgc2hpcCBhbmQgY2hlY2tzIGlmIGl0J3Mgc3Vua1xuICAgIGdldEhpdCgpIHtcbiAgICAgICAgdGhpcy5udW1iZXJPZkhpdHMrKztcbiAgICAgICAgaWYgKHRoaXMubnVtYmVyT2ZIaXRzID49IHRoaXMuc2hpcExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zdW5rID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICBpZiAodGhpcy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2hpcCB9IGZyb20gJy4vU2hpcCc7XG4vLyBHYW1lYm9hcmQgY2xhc3MgcmVwcmVzZW50cyB0aGUgZ2FtZSBib2FyZCBmb3IgYSBwbGF5ZXJcbmV4cG9ydCBjbGFzcyBHYW1lYm9hcmQge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5zaGlwcyA9IFtdO1xuICAgICAgICB0aGlzLkdSSURfU0laRSA9IDEwO1xuICAgICAgICB0aGlzLm51bWJlck9mU2hpcHMgPSAwO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmJvYXJkID0gW107XG4gICAgICAgIHRoaXMubWlzc2VkU2hvdHMgPSBbXTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5HUklEX1NJWkU7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5ib2FyZFtpXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5taXNzZWRTaG90c1tpXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLkdSSURfU0laRTsgaisrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFtpXVtqXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5taXNzZWRTaG90c1tpXVtqXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG4gICAgLy8gUGxhY2UgYSBzaGlwIG9uIHRoZSBib2FyZCB3aXRoIGFkZGl0aW9uYWwgY2hlY2tzXG4gICAgcGxhY2VTaGlwKFNoaXAsIGNvbHVtbiwgcm93KSB7XG4gICAgICAgIGxldCBwbGFjZXMgPSBbXTtcbiAgICAgICAgaWYgKFNoaXAuaXNWZXJ0aWNhbCgpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBzaGlwIHBsYWNlbWVudCBpcyB3aXRoaW4gYm91bmRzXG4gICAgICAgICAgICBpZiAocm93ICsgU2hpcC5nZXRMZW5ndGgoKSA+IHRoaXMuR1JJRF9TSVpFIHx8IGNvbHVtbiA8IDAgfHwgcm93IDwgMClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3Igb3ZlcmxhcCBhbmQgb25lLWNlbGwgZGlzdGFuY2VcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgU2hpcC5nZXRMZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ2VsbEF2YWlsYWJsZShjb2x1bW4sIHJvdyArIGkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQbGFjZSB0aGUgc2hpcCBhZnRlciBzdWNjZXNzZnVsIGNoZWNrc1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBTaGlwLmdldExlbmd0aCgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW2NvbHVtbl1bcm93ICsgaV0gPSBTaGlwO1xuICAgICAgICAgICAgICAgIHBsYWNlcy5wdXNoKFtjb2x1bW4sIHJvdyArIGldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChTaGlwLmlzVmVydGljYWwoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHNoaXAgcGxhY2VtZW50IGlzIHdpdGhpbiBib3VuZHNcbiAgICAgICAgICAgIGlmIChjb2x1bW4gKyBTaGlwLmdldExlbmd0aCgpID4gdGhpcy5HUklEX1NJWkUgfHwgY29sdW1uIDwgMCB8fCByb3cgPCAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBvdmVybGFwIGFuZCBvbmUtY2VsbCBkaXN0YW5jZVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBTaGlwLmdldExlbmd0aCgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDZWxsQXZhaWxhYmxlKGNvbHVtbiArIGksIHJvdykpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBsYWNlIHRoZSBzaGlwIGFmdGVyIHN1Y2Nlc3NmdWwgY2hlY2tzXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IFNoaXAuZ2V0TGVuZ3RoKCk7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbY29sdW1uICsgaV1bcm93XSA9IFNoaXA7XG4gICAgICAgICAgICAgICAgcGxhY2VzLnB1c2goW2NvbHVtbiArIGksIHJvd10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hpcHMucHVzaCh7XG4gICAgICAgICAgICBzaGlwOiBTaGlwLFxuICAgICAgICAgICAgcGxhY2VzOiBwbGFjZXNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubnVtYmVyT2ZTaGlwcysrO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gSGVscGVyIHRvIGNoZWNrIGlmIGEgcG9zaXRpb24gaXMgd2l0aGluIHRoZSBnYW1lIGJvYXJkIGJvdW5kc1xuICAgIGlzV2l0aGluQm91bmRzKGNvbHVtbiwgcm93KSB7XG4gICAgICAgIHJldHVybiBjb2x1bW4gPj0gMCAmJiBjb2x1bW4gPCB0aGlzLkdSSURfU0laRSAmJiByb3cgPj0gMCAmJiByb3cgPCB0aGlzLkdSSURfU0laRTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgYSBjZWxsIGlzIGF2YWlsYWJsZSAobm8gb3ZlcmxhcCkgYW5kIGhhcyBhdCBsZWFzdCBvbmUgY2VsbCBkaXN0YW5jZVxuICAgIGlzQ2VsbEF2YWlsYWJsZShjb2x1bW4sIHJvdykge1xuICAgICAgICBpZiAodGhpcy5ib2FyZFtjb2x1bW5dW3Jvd10gIT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIENoZWNrIGlmIHRoZXJlJ3MgYWxyZWFkeSBhIHNoaXBcbiAgICAgICAgLy8gQ2hlY2sgc3Vycm91bmRpbmcgY2VsbHMgZm9yIG9uZS1jZWxsIGRpc3RhbmNlXG4gICAgICAgIGZvciAobGV0IGkgPSAtMTsgaSA8PSAxOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAtMTsgaiA8PSAxOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja0NvbCA9IGNvbHVtbiArIGk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tSb3cgPSByb3cgKyBqO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzV2l0aGluQm91bmRzKGNoZWNrQ29sLCBjaGVja1JvdykgJiYgdGhpcy5ib2FyZFtjaGVja0NvbF1bY2hlY2tSb3ddICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gQSBzaGlwIGlzIHRvbyBjbG9zZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBzaGlwIGF0IGEgc3BlY2lmaWMgcG9zaXRpb25cbiAgICBnZXRTaGlwQXQoY29sdW1uLCByb3cpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9hcmRbY29sdW1uXVtyb3ddO1xuICAgIH1cbiAgICAvLyBSZWNlaXZlIGFuIGF0dGFjayBhdCBhIHNwZWNpZmljIHBvc2l0aW9uXG4gICAgcmVjZWl2ZUF0dGFjayhjb2x1bW4sIHJvdykge1xuICAgICAgICBsZXQgc2hpcCA9IHRoaXMuZ2V0U2hpcEF0KGNvbHVtbiwgcm93KTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5udW1iZXJPZlNoaXBzKTtcbiAgICAgICAgaWYgKHNoaXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMubWlzc2VkU2hvdHNbY29sdW1uXVtyb3ddID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzaGlwLmdldEhpdCgpO1xuICAgICAgICBpZiAoc2hpcC5pc1N1bmsoKSkge1xuICAgICAgICAgICAgdGhpcy5udW1iZXJPZlNoaXBzLS07XG4gICAgICAgICAgICB0aGlzLm1hcmtBZGphY2VudENlbGxzKHNoaXApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBtYXJrQWRqYWNlbnRDZWxscyhzaGlwKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbWy0xLCAtMV0sIFstMSwgMF0sIFstMSwgMV0sIFswLCAtMV0sIFswLCAxXSwgWzEsIC0xXSwgWzEsIDBdLCBbMSwgMV1dO1xuICAgICAgICB0aGlzLnNoaXBzLmZvckVhY2goKHNoaXBJbmZvKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2hpcEluZm8uc2hpcCA9PT0gc2hpcCkge1xuICAgICAgICAgICAgICAgIHNoaXBJbmZvLnBsYWNlcy5mb3JFYWNoKChwbGFjZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25zLmZvckVhY2goKFtkeCwgZHldKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGpDb2wgPSBwbGFjZVswXSArIGR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRqUm93ID0gcGxhY2VbMV0gKyBkeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzV2l0aGluQm91bmRzKGFkakNvbCwgYWRqUm93KSAmJiB0aGlzLmdldFNoaXBBdChhZGpDb2wsIGFkalJvdykgIT09IHNoaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pc3NlZFNob3RzW2FkakNvbF1bYWRqUm93XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gTmV3IG1ldGhvZCB0byBnZXQgYWxsIGNlbGxzIHRoYXQgc2hvdWxkIGJlIG1hcmtlZCBhcyAnbWlzcydcbiAgICBnZXRBbGxNaXNzZWRDZWxscygpIHtcbiAgICAgICAgbGV0IG1pc3NlZENlbGxzID0gW107XG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IHRoaXMuR1JJRF9TSVpFOyBjb2wrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgdGhpcy5HUklEX1NJWkU7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWlzc2VkU2hvdHNbY29sXVtyb3ddKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pc3NlZENlbGxzLnB1c2goW2NvbCwgcm93XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaXNzZWRDZWxscztcbiAgICB9XG4gICAgLy8gR2V0IGFsbCBtaXNzZWQgYXR0YWNrc1xuICAgIGdldE1pc3NlZFNob3RzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taXNzZWRTaG90cztcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgYWxsIHNoaXBzIGFyZSBzdW5rXG4gICAgYWxsU2hpcHNTdW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5udW1iZXJPZlNoaXBzIDw9IDA7XG4gICAgfVxuICAgIC8vTWV0aG9kIHRvIHBsYWNlIHNoaXBzIHJhbmRvbWx5XG4gICAgcGxhY2VTaGlwc1JhbmRvbWx5KCkge1xuICAgICAgICBjb25zdCBzaGlwcyA9IFtcbiAgICAgICAgICAgIHsgbmFtZTogJ0NhcnJpZXInLCBsZW5ndGg6IDUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0JhdHRsZXNoaXAnLCBsZW5ndGg6IDQgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0NydWlzZXInLCBsZW5ndGg6IDMgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ1N1Ym1hcmluZScsIGxlbmd0aDogMyB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnRGVzdHJveWVyJywgbGVuZ3RoOiAyIH1cbiAgICAgICAgXTtcbiAgICAgICAgc2hpcHMuZm9yRWFjaChzaGlwSW5mbyA9PiB7XG4gICAgICAgICAgICBsZXQgcGxhY2VkID0gZmFsc2U7XG4gICAgICAgICAgICB3aGlsZSAoIXBsYWNlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuR1JJRF9TSVpFKTtcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLkdSSURfU0laRSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBNYXRoLnJhbmRvbSgpIDwgMC41ID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwID0gbmV3IFNoaXAoc2hpcEluZm8ubmFtZSwgc2hpcEluZm8ubGVuZ3RoLCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGxhY2VTaGlwKHNoaXAsIGNvbCwgcm93KSkge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEVuZW15QWkge1xuICAgIGNvbnN0cnVjdG9yKG9wcG9uZW50Qm9hcmQpIHtcbiAgICAgICAgdGhpcy5vcHBvbmVudEJvYXJkID0gb3Bwb25lbnRCb2FyZDtcbiAgICAgICAgdGhpcy5HUklEX1NJWkUgPSAxMDtcbiAgICAgICAgdGhpcy5sYXN0SGl0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wb3RlbnRpYWxUYXJnZXRzID0gW107XG4gICAgICAgIHRoaXMuYXR0YWNrZWRDZWxscyA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgbWFrZU1vdmUoKSB7XG4gICAgICAgIGxldCBtb3ZlO1xuICAgICAgICBpZiAodGhpcy5sYXN0SGl0ICYmIHRoaXMucG90ZW50aWFsVGFyZ2V0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBtb3ZlID0gdGhpcy50YXJnZXRBZGphY2VudENlbGxzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtb3ZlID0gdGhpcy5yYW5kb21Nb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRhY2tlZENlbGxzLmFkZChgJHttb3ZlWzBdfSwke21vdmVbMV19YCk7XG4gICAgICAgIHJldHVybiBtb3ZlO1xuICAgIH1cbiAgICB0YXJnZXRBZGphY2VudENlbGxzKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5wb3RlbnRpYWxUYXJnZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG1vdmUgPSB0aGlzLnBvdGVudGlhbFRhcmdldHMucG9wKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXR0YWNrZWRDZWxscy5oYXMoYCR7bW92ZVswXX0sJHttb3ZlWzFdfWApKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5vcHBvbmVudEJvYXJkLnJlY2VpdmVBdHRhY2sobW92ZVswXSwgbW92ZVsxXSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RIaXQgPSBtb3ZlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEFkamFjZW50Q2VsbHMobW92ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtb3ZlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIGFsbCBwb3RlbnRpYWwgdGFyZ2V0cyBoYXZlIGJlZW4gYXR0YWNrZWQsIHJlc2V0IGFuZCBtYWtlIGEgcmFuZG9tIG1vdmVcbiAgICAgICAgdGhpcy5sYXN0SGl0ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZG9tTW92ZSgpO1xuICAgIH1cbiAgICByYW5kb21Nb3ZlKCkge1xuICAgICAgICBsZXQgbW92ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgbW92ZSA9IFtcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLkdSSURfU0laRSksXG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5HUklEX1NJWkUpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9IHdoaWxlICh0aGlzLmF0dGFja2VkQ2VsbHMuaGFzKGAke21vdmVbMF19LCR7bW92ZVsxXX1gKSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMub3Bwb25lbnRCb2FyZC5yZWNlaXZlQXR0YWNrKG1vdmVbMF0sIG1vdmVbMV0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RIaXQgPSBtb3ZlO1xuICAgICAgICAgICAgdGhpcy5hZGRBZGphY2VudENlbGxzKG1vdmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb3ZlO1xuICAgIH1cbiAgICBhZGRBZGphY2VudENlbGxzKG1vdmUpIHtcbiAgICAgICAgY29uc3QgW2NvbCwgcm93XSA9IG1vdmU7XG4gICAgICAgIGNvbnN0IGFkamFjZW50Q2VsbHMgPSBbXG4gICAgICAgICAgICBbY29sIC0gMSwgcm93XSwgW2NvbCArIDEsIHJvd10sIFtjb2wsIHJvdyAtIDFdLCBbY29sLCByb3cgKyAxXVxuICAgICAgICBdO1xuICAgICAgICB0aGlzLnBvdGVudGlhbFRhcmdldHMgPSBhZGphY2VudENlbGxzLmZpbHRlcigoW2NvbCwgcm93XSkgPT4gY29sID49IDAgJiYgY29sIDwgdGhpcy5HUklEX1NJWkUgJiYgcm93ID49IDAgJiYgcm93IDwgdGhpcy5HUklEX1NJWkUgJiZcbiAgICAgICAgICAgICF0aGlzLmF0dGFja2VkQ2VsbHMuaGFzKGAke2NvbH0sJHtyb3d9YCkpLmNvbmNhdCh0aGlzLnBvdGVudGlhbFRhcmdldHMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdhbWVib2FyZCB9IGZyb20gXCIuL0dhbWVib2FyZFwiO1xuaW1wb3J0IHsgU2hpcFBsYWNlbWVudFdpbmRvdyB9IGZyb20gXCIuL1NoaXBQbGFjZW1lbnRXaW5kb3dcIjtcbmltcG9ydCB7IEVuZW15QWkgfSBmcm9tIFwiLi9FbmVteUFpXCI7XG5leHBvcnQgZnVuY3Rpb24gRG9tKCkge1xuICAgIGNvbnN0IEdSSURfU0laRSA9IDEwO1xuICAgIGxldCBwbGF5ZXJCb2FyZDtcbiAgICBsZXQgZW5lbXlCb2FyZDtcbiAgICBsZXQgYWlQbGF5ZXI7XG4gICAgbGV0IGlzUGxheWVyVHVybjtcbiAgICAvLyBDcmVhdGUgYSBncmlkIGZvciB0aGUgZ2FtZSBib2FyZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUdyaWQoY29udGFpbmVySWQsIGdhbWVib2FyZCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtjb250YWluZXJJZH0tYm9hcmRgKTtcbiAgICAgICAgaWYgKCFjb250YWluZXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJzsgLy8gQ2xlYXIgZXhpc3RpbmcgY29udGVudFxuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYm9hcmQnKTtcbiAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgR1JJRF9TSVpFOyBjb2wrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgR1JJRF9TSVpFOyByb3crKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcbiAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoYCR7Y29udGFpbmVySWR9LWNlbGxgKTtcbiAgICAgICAgICAgICAgICBjZWxsLmRhdGFzZXQucm93ID0gcm93LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY2VsbC5kYXRhc2V0LmNvbCA9IGNvbC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJJZCA9PT0gJ2VuZW15JylcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGhhbmRsZUNlbGxDbGljayhjb2wsIHJvdywgZ2FtZWJvYXJkLCBjZWxsKSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhhbmRsZSBjbGljayBldmVudHMgb24gdGhlIGVuZW15IGJvYXJkXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2VsbENsaWNrKGNvbCwgcm93LCBnYW1lYm9hcmQsIGNlbGwpIHtcbiAgICAgICAgaWYgKCFpc1BsYXllclR1cm4gfHwgY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpdCcpIHx8IGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtaXNzJykpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gSWdub3JlIGNsaWNrcyB3aGVuIGl0J3Mgbm90IHBsYXllcidzIHR1cm4gb3Igb24gYWxyZWFkeSBhdHRhY2tlZCBjZWxsc1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdoaXQnKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBnYW1lYm9hcmQuZ2V0U2hpcEF0KGNvbCwgcm93KTtcbiAgICAgICAgICAgIGlmIChzaGlwICYmIHNoaXAuaXNTdW5rKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzaGlwLmdldE5hbWUoKSArICcgaXMgc3VuaycpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUdyaWQoJ2VuZW15JywgZ2FtZWJvYXJkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuYWxsU2hpcHNTdW5rKCkpIHtcbiAgICAgICAgICAgICAgICBHYW1lRmluYWxlKGdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGxheWVyIGdldHMgYW5vdGhlciB0dXJuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHBsYXllclR1cm4sIDUwMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ21pc3MnKTtcbiAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IGZhbHNlO1xuICAgICAgICAgICAgc2V0VGltZW91dChhaVR1cm4sIDUwMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcGxheWVyVHVybigpIHtcbiAgICAgICAgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWlUdXJuKCkge1xuICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKVxuICAgICAgICAgICAgcmV0dXJuOyAvLyBTYWZlZ3VhcmQgYWdhaW5zdCB1bmV4cGVjdGVkIGNhbGxzXG4gICAgICAgIGNvbnN0IFthaUNvbCwgYWlSb3ddID0gYWlQbGF5ZXIubWFrZU1vdmUoKTtcbiAgICAgICAgY29uc3QgcGxheWVyQ2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5wbGF5ZXItY2VsbFtkYXRhLWNvbD1cIiR7YWlDb2x9XCJdW2RhdGEtcm93PVwiJHthaVJvd31cIl1gKTtcbiAgICAgICAgaWYgKHBsYXllckJvYXJkLmdldFNoaXBBdChhaUNvbCwgYWlSb3cpKSB7XG4gICAgICAgICAgICBwbGF5ZXJDZWxsLmNsYXNzTGlzdC5hZGQoJ2hpdCcpO1xuICAgICAgICAgICAgdXBkYXRlR3JpZCgncGxheWVyJywgcGxheWVyQm9hcmQpO1xuICAgICAgICAgICAgaWYgKHBsYXllckJvYXJkLmFsbFNoaXBzU3VuaygpKSB7XG4gICAgICAgICAgICAgICAgR2FtZUZpbmFsZShwbGF5ZXJCb2FyZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQUkgZ2V0cyBhbm90aGVyIHR1cm5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoYWlUdXJuLCA1MDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGxheWVyQ2VsbC5jbGFzc0xpc3QuYWRkKCdtaXNzJyk7XG4gICAgICAgICAgICB1cGRhdGVHcmlkKCdwbGF5ZXInLCBwbGF5ZXJCb2FyZCk7XG4gICAgICAgICAgICBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICAgICAgcGxheWVyVHVybigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vQWRkaW5nIG1pc3MgY2xhc3MgdG8gY2VsbCB0aGF0IG5lYXIgdGhlIHN1bmsgc2hpcFxuICAgIGZ1bmN0aW9uIHVwZGF0ZUdyaWQoY29udGFpbmVySWQsIGdhbWVib2FyZCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtjb250YWluZXJJZH0tYm9hcmRgKTtcbiAgICAgICAgaWYgKCFjb250YWluZXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNlbGxzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgICAgIGNvbnN0IG1pc3NlZENlbGxzID0gZ2FtZWJvYXJkLmdldEFsbE1pc3NlZENlbGxzKCk7XG4gICAgICAgIG1pc3NlZENlbGxzLmZvckVhY2goKFtjb2wsIHJvd10pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY29sICogR1JJRF9TSVpFICsgcm93O1xuICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ21pc3MnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIG5ldyBnYW1lIGJvYXJkXG4gICAgZnVuY3Rpb24gY3JlYXRlTmV3R2FtZWJvYXJkKCkge1xuICAgICAgICBkZWxldGVQcmV2Qm9hcmRzKCk7XG4gICAgICAgIGNvbnN0IGdhbWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZ2FtZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdnYW1lLWNvbnRhaW5lcicpO1xuICAgICAgICBjb25zdCBwbGF5ZXJCb2FyZENvbnRhaW5lciA9IGNyZWF0ZUJvYXJkQ29udGFpbmVyKCdQbGF5ZXInKTtcbiAgICAgICAgY29uc3QgRW5lbXlCb2FyZENvbnRhaW5lciA9IGNyZWF0ZUJvYXJkQ29udGFpbmVyKCdFbmVteScpO1xuICAgICAgICBnYW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHBsYXllckJvYXJkQ29udGFpbmVyKTtcbiAgICAgICAgZ2FtZUNvbnRhaW5lci5hcHBlbmRDaGlsZChFbmVteUJvYXJkQ29udGFpbmVyKTtcbiAgICAgICAgY29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgbWFpbkNvbnRlbnQuYXBwZW5kQ2hpbGQoZ2FtZUNvbnRhaW5lcik7XG4gICAgICAgIHBsYXllckJvYXJkID0gbmV3IEdhbWVib2FyZCgncGxheWVyJyk7XG4gICAgICAgIGVuZW15Qm9hcmQgPSBuZXcgR2FtZWJvYXJkKCdlbmVteScpO1xuICAgICAgICBhaVBsYXllciA9IG5ldyBFbmVteUFpKHBsYXllckJvYXJkKTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBwbGF5ZXIncyBib2FyZCBmaXJzdFxuICAgICAgICBjcmVhdGVHcmlkKCdwbGF5ZXInLCBwbGF5ZXJCb2FyZCk7XG4gICAgICAgIC8vIFBsYWNlIGVuZW15IHNoaXBzIHJhbmRvbWx5XG4gICAgICAgIGVuZW15Qm9hcmQucGxhY2VTaGlwc1JhbmRvbWx5KCk7XG4gICAgICAgIC8vIFRoZW4gb3BlbiB0aGUgc2hpcCBwbGFjZW1lbnQgd2luZG93XG4gICAgICAgIFNoaXBQbGFjZW1lbnRXaW5kb3cocGxheWVyQm9hcmQsICgpID0+IHtcbiAgICAgICAgICAgIC8vIE9ubHkgY3JlYXRlIHRoZSBlbmVteSBib2FyZCBhZnRlciBzaGlwIHBsYWNlbWVudCBpcyBjb21wbGV0ZVxuICAgICAgICAgICAgY3JlYXRlR3JpZCgnZW5lbXknLCBlbmVteUJvYXJkKTtcbiAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBTdGFydCB3aXRoIHNoaXAgcGxhY2VtZW50IGZvciB0aGUgcGxheWVyXG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIGNvbnRhaW5lciBmb3IgYSBnYW1lIGJvYXJkXG4gICAgZnVuY3Rpb24gY3JlYXRlQm9hcmRDb250YWluZXIodGl0bGUpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdib2FyZC1jb250YWluZXInKTtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gYCR7dGl0bGV9IGJvYXJkYDtcbiAgICAgICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYm9hcmQuaWQgPSBgJHt0aXRsZS50b0xvd2VyQ2FzZSgpfS1ib2FyZGA7XG4gICAgICAgIGJvYXJkLmNsYXNzTGlzdC5hZGQoJ2JvYXJkJyk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXIpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYm9hcmQpO1xuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGdhbWUgYm9hcmRzXG4gICAgZnVuY3Rpb24gZGVsZXRlUHJldkJvYXJkcygpIHtcbiAgICAgICAgbGV0IGdhbWVDb250YWluZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdhbWUtY29udGFpbmVyJyk7XG4gICAgICAgIGdhbWVDb250YWluZXJzLmZvckVhY2goY29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIGdhbWVcbiAgICBmdW5jdGlvbiBzdGFydFVwKCkge1xuICAgICAgICBjcmVhdGVOZXdHYW1lYm9hcmQoKTtcbiAgICAgICAgY29uc3QgbmV3R2FtZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXctZ2FtZS1idG4nKTtcbiAgICAgICAgaWYgKG5ld0dhbWVCdG4pIHtcbiAgICAgICAgICAgIG5ld0dhbWVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjcmVhdGVOZXdHYW1lYm9hcmQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk5ldyBnYW1lIGJ1dHRvbiBub3QgZm91bmRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9GaW5pc2ggdGhlIGdhbWVcbiAgICBmdW5jdGlvbiBHYW1lRmluYWxlKGdhbWVib2FyZCkge1xuICAgICAgICBjb25zdCBnYW1lQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWUtY29udGFpbmVyJyk7XG4gICAgICAgIGNvbnN0IGZpbmFsZVJlc3VsdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaW5hbGUtcmVzdWx0Jyk7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0TmFtZSgpID09PSAncGxheWVyJykge1xuICAgICAgICAgICAgZmluYWxlUmVzdWx0LnRleHRDb250ZW50ID0gJ1BsYXllciBMb3NlJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZpbmFsZVJlc3VsdC50ZXh0Q29udGVudCA9ICdQbGF5ZXIgV2luJztcbiAgICAgICAgfVxuICAgICAgICBnYW1lQ29udGFpbmVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0VXBcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcbmltcG9ydCB7IEdhbWVib2FyZCB9IGZyb20gXCIuL0dhbWVib2FyZFwiO1xuZXhwb3J0IGZ1bmN0aW9uIFNoaXBQbGFjZW1lbnRXaW5kb3cocGxheWVyQm9hcmQsIG9uRmluaXNoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4td2luZG93JykuY2xhc3NMaXN0LmFkZCgnbm9uLWludGVyYWN0aXZlJyk7XG4gICAgY29uc3QgR1JJRF9TSVpFID0gMTA7XG4gICAgY29uc3Qgc2hpcHMgPSBbXG4gICAgICAgIHsgbmFtZTogJ0NhcnJpZXInLCBsZW5ndGg6IDUgfSxcbiAgICAgICAgeyBuYW1lOiAnQmF0dGxlc2hpcCcsIGxlbmd0aDogNCB9LFxuICAgICAgICB7IG5hbWU6ICdDcnVpc2VyJywgbGVuZ3RoOiAzIH0sXG4gICAgICAgIHsgbmFtZTogJ1N1Ym1hcmluZScsIGxlbmd0aDogMyB9LFxuICAgICAgICB7IG5hbWU6ICdEZXN0cm95ZXInLCBsZW5ndGg6IDIgfVxuICAgIF07XG4gICAgbGV0IGN1cnJlbnRTaGlwSW5kZXggPSAwO1xuICAgIGxldCBjdXJyZW50T3JpZW50YXRpb24gPSAndmVydGljYWwnO1xuICAgIC8vIENyZWF0ZSB0aGUgc2hpcCBwbGFjZW1lbnQgd2luZG93XG4gICAgZnVuY3Rpb24gY3JlYXRlUGxhY2VtZW50V2luZG93KCkge1xuICAgICAgICBjb25zdCBwbGFjZW1lbnRXaW5kb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgcGxhY2VtZW50V2luZG93LmNsYXNzTGlzdC5hZGQoJ3BsYWNlbWVudC13aW5kb3cnKTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9ICdQbGFjZSBZb3VyIFNoaXBzJztcbiAgICAgICAgcGxhY2VtZW50V2luZG93LmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgICAgY29uc3QgZ3JpZCA9IGNyZWF0ZVBsYWNlbWVudEdyaWQoKTtcbiAgICAgICAgcGxhY2VtZW50V2luZG93LmFwcGVuZENoaWxkKGdyaWQpO1xuICAgICAgICBjb25zdCBjb250cm9scyA9IGNyZWF0ZUNvbnRyb2xzKCk7XG4gICAgICAgIHBsYWNlbWVudFdpbmRvdy5hcHBlbmRDaGlsZChjb250cm9scyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKHBsYWNlbWVudFdpbmRvdywgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIHRoZSBncmlkIGZvciBzaGlwIHBsYWNlbWVudFxuICAgIGZ1bmN0aW9uIGNyZWF0ZVBsYWNlbWVudEdyaWQoKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZ3JpZC5jbGFzc0xpc3QuYWRkKCdib2FyZCcpO1xuICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoJ3BsYWNlbWVudC1ib2FyZCcpO1xuICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBHUklEX1NJWkU7IGNvbCsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBHUklEX1NJWkU7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgncGxhY2VtZW50LWNlbGwnKTtcbiAgICAgICAgICAgICAgICBjZWxsLmRhdGFzZXQucm93ID0gcm93LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY2VsbC5kYXRhc2V0LmNvbCA9IGNvbC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBwbGFjZVNoaXAoY29sLCByb3cpKTtcbiAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHByZXZpZXdTaGlwKGNvbCwgcm93KSk7XG4gICAgICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGNsZWFyUHJldmlldyk7XG4gICAgICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3JpZDtcbiAgICB9XG4gICAgLy9SZXN0YXJ0IHBsYWNlbWVudCBib1xuICAgIGZ1bmN0aW9uIHJlc3RhcnQoKSB7XG4gICAgICAgIGN1cnJlbnRTaGlwSW5kZXggPSAwO1xuICAgICAgICBwbGF5ZXJCb2FyZCA9IG5ldyBHYW1lYm9hcmQoJ3BsYXllcicpO1xuICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGFjZW1lbnQtY2VsbCcpO1xuICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ3NoaXAtcGxhY2VkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgY29udHJvbCBlbGVtZW50cyAocm90YXRlIGJ1dHRvbiBhbmQgc2hpcCBpbmZvKVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xzKCkge1xuICAgICAgICBjb25zdCBjb250cm9scyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250cm9scy5jbGFzc0xpc3QuYWRkKCdwbGFjZW1lbnQtY29udHJvbHMnKTtcbiAgICAgICAgY29uc3Qgcm90YXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIHJvdGF0ZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdSb3RhdGUgU2hpcCc7XG4gICAgICAgIHJvdGF0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJvdGF0ZVNoaXApO1xuICAgICAgICBjb250cm9scy5hcHBlbmRDaGlsZChyb3RhdGVCdXR0b24pO1xuICAgICAgICBjb25zdCBSYW5kb21CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgUmFuZG9tQnRuLnRleHRDb250ZW50ID0gJ1JhbmRvbWl6ZSc7XG4gICAgICAgIFJhbmRvbUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJhbmRvbWl6ZSk7XG4gICAgICAgIGNvbnRyb2xzLmFwcGVuZENoaWxkKFJhbmRvbUJ0bik7XG4gICAgICAgIGNvbnN0IHJlc3RhcnRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgcmVzdGFydEJ1dHRvbi50ZXh0Q29udGVudCA9ICdSZXN0YXJ0JztcbiAgICAgICAgcmVzdGFydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlc3RhcnQpO1xuICAgICAgICBjb250cm9scy5hcHBlbmRDaGlsZChyZXN0YXJ0QnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xzO1xuICAgIH1cbiAgICBmdW5jdGlvbiByYW5kb21pemUoKSB7XG4gICAgICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcHNSYW5kb21seSgpO1xuICAgICAgICBmaW5pc2hQbGFjZW1lbnQoKTtcbiAgICB9XG4gICAgLy8gUm90YXRlIHRoZSBjdXJyZW50IHNoaXAgb3JpZW50YXRpb25cbiAgICBmdW5jdGlvbiByb3RhdGVTaGlwKCkge1xuICAgICAgICBjdXJyZW50T3JpZW50YXRpb24gPSBjdXJyZW50T3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIC8vIFBsYWNlIGEgc2hpcCBvbiB0aGUgYm9hcmRcbiAgICBmdW5jdGlvbiBwbGFjZVNoaXAoY29sLCByb3cpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNoaXAgPSBzaGlwc1tjdXJyZW50U2hpcEluZGV4XTtcbiAgICAgICAgY29uc3Qgc2hpcCA9IG5ldyBTaGlwKGN1cnJlbnRTaGlwLm5hbWUsIGN1cnJlbnRTaGlwLmxlbmd0aCwgY3VycmVudE9yaWVudGF0aW9uKTtcbiAgICAgICAgaWYgKHBsYXllckJvYXJkLnBsYWNlU2hpcChzaGlwLCBjb2wsIHJvdykpIHtcbiAgICAgICAgICAgIHVwZGF0ZUdyaWQoY29sLCByb3cpO1xuICAgICAgICAgICAgY3VycmVudFNoaXBJbmRleCsrO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTaGlwSW5kZXggPj0gc2hpcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZmluaXNoUGxhY2VtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVXBkYXRlIHRoZSBncmlkIGFmdGVyIHBsYWNpbmcgYSBzaGlwXG4gICAgZnVuY3Rpb24gdXBkYXRlR3JpZChjb2wsIHJvdykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2hpcCA9IHNoaXBzW2N1cnJlbnRTaGlwSW5kZXhdO1xuICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGFjZW1lbnQtY2VsbCcpO1xuICAgICAgICBpZiAoY3VycmVudE9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gY29sICogR1JJRF9TSVpFICsgKHJvdyArIGkpO1xuICAgICAgICAgICAgICAgIGNlbGxzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdzaGlwLXBsYWNlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudE9yaWVudGF0aW9uID09ICdob3Jpem9udGFsJylcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAoY29sICsgaSkgKiBHUklEX1NJWkUgKyByb3c7XG4gICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3NoaXAtcGxhY2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIC8vIFByZXZpZXcgc2hpcCBwbGFjZW1lbnQgb24gaG92ZXJcbiAgICBmdW5jdGlvbiBwcmV2aWV3U2hpcChjb2wsIHJvdykge1xuICAgICAgICBjbGVhclByZXZpZXcoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFNoaXAgPSBzaGlwc1tjdXJyZW50U2hpcEluZGV4XTtcbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxhY2VtZW50LWNlbGwnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcHJldmlld1JvdyA9IGN1cnJlbnRPcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IHJvdyArIGkgOiByb3c7XG4gICAgICAgICAgICBjb25zdCBwcmV2aWV3Q29sID0gY3VycmVudE9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgPyBjb2wgKyBpIDogY29sO1xuICAgICAgICAgICAgaWYgKHByZXZpZXdSb3cgPCBHUklEX1NJWkUgJiYgcHJldmlld0NvbCA8IEdSSURfU0laRSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcHJldmlld0NvbCAqIEdSSURfU0laRSArIHByZXZpZXdSb3c7XG4gICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRQbGFjZW1lbnQocm93LCBjb2wsIGN1cnJlbnRTaGlwLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3ByZXZpZXcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGxzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkLXByZXZpZXcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgcGxhY2VtZW50IGlzIHZhbGlkXG4gICAgZnVuY3Rpb24gaXNWYWxpZFBsYWNlbWVudChyb3csIGNvbCwgc2hpcExlbmd0aCkge1xuICAgICAgICBpZiAoY3VycmVudE9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2wgKyBzaGlwTGVuZ3RoIDw9IEdSSURfU0laRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByb3cgKyBzaGlwTGVuZ3RoIDw9IEdSSURfU0laRTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDbGVhciB0aGUgc2hpcCBwbGFjZW1lbnQgcHJldmlld1xuICAgIGZ1bmN0aW9uIGNsZWFyUHJldmlldygpIHtcbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxhY2VtZW50LWNlbGwnKTtcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdwcmV2aWV3Jyk7XG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmFsaWQtcHJldmlldycpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlUGxheWVyQm9hcmQoKSB7XG4gICAgICAgIGNvbnN0IHBsYXllckJvYXJkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXItYm9hcmQnKTtcbiAgICAgICAgaWYgKCFwbGF5ZXJCb2FyZEVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNlbGxzID0gcGxheWVyQm9hcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IEdSSURfU0laRTsgY29sKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEdSSURfU0laRTsgcm93KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwID0gcGxheWVyQm9hcmQuZ2V0U2hpcEF0KGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNvbCAqIEdSSURfU0laRSArIHJvdztcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRmluaXNoIHRoZSBzaGlwIHBsYWNlbWVudCBwaGFzZVxuICAgIGZ1bmN0aW9uIGZpbmlzaFBsYWNlbWVudCgpIHtcbiAgICAgICAgY29uc3QgcGxhY2VtZW50V2luZG93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYWNlbWVudC13aW5kb3cnKTtcbiAgICAgICAgaWYgKHBsYWNlbWVudFdpbmRvdykge1xuICAgICAgICAgICAgcGxhY2VtZW50V2luZG93LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLXdpbmRvdycpLmNsYXNzTGlzdC5yZW1vdmUoJ25vbi1pbnRlcmFjdGl2ZScpO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIHBsYXllcidzIGJvYXJkIHdpdGggcGxhY2VkIHNoaXBzXG4gICAgICAgIHVwZGF0ZVBsYXllckJvYXJkKCk7XG4gICAgICAgIG9uRmluaXNoKCk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIHNoaXAgcGxhY2VtZW50IHdpbmRvd1xuICAgIGNyZWF0ZVBsYWNlbWVudFdpbmRvdygpO1xufVxuIiwiLy8gSW1wb3J0IG5lY2Vzc2FyeSBmaWxlcyBhbmQgc3R5bGVzXG5pbXBvcnQgJy4vaW5kZXguaHRtbCc7XG5pbXBvcnQgJy4vc3R5bGUvc3R5bGUuY3NzJztcbmltcG9ydCB7IERvbSB9IGZyb20gJy4vc2NyaXB0cy9Eb20nO1xuLy8gTWFpbiBmdW5jdGlvbiB0byBzdGFydCB0aGUgYXBwbGljYXRpb25cbmZ1bmN0aW9uIG1haW4oKSB7XG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgRE9NIGFuZCBzdGFydCB0aGUgZ2FtZVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbSA9IERvbSgpO1xuICAgICAgICBkb20uc3RhcnRVcCgpO1xuICAgIH0pO1xufVxuLy8gUnVuIHRoZSBtYWluIGZ1bmN0aW9uIHdoZW4gdGhlIHNjcmlwdCBsb2Fkc1xubWFpbigpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsIlNoaXAiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJvcmllbnRhdGlvbiIsInNoaXBMZW5ndGgiLCJudW1iZXJPZkhpdHMiLCJzdW5rIiwiZ2V0TGVuZ3RoIiwiZ2V0TmFtZSIsImdldE51bWJlck9mSGl0cyIsImlzU3VuayIsImdldEhpdCIsImlzVmVydGljYWwiLCJHYW1lYm9hcmQiLCJzaGlwcyIsIkdSSURfU0laRSIsIm51bWJlck9mU2hpcHMiLCJib2FyZCIsIm1pc3NlZFNob3RzIiwiaW5pdGlhbGl6ZSIsImoiLCJwbGFjZVNoaXAiLCJjb2x1bW4iLCJyb3ciLCJwbGFjZXMiLCJpc0NlbGxBdmFpbGFibGUiLCJzaGlwIiwiaXNXaXRoaW5Cb3VuZHMiLCJjaGVja0NvbCIsImNoZWNrUm93IiwiZ2V0U2hpcEF0IiwicmVjZWl2ZUF0dGFjayIsImNvbnNvbGUiLCJsb2ciLCJtYXJrQWRqYWNlbnRDZWxscyIsImRpcmVjdGlvbnMiLCJmb3JFYWNoIiwic2hpcEluZm8iLCJwbGFjZSIsImR4IiwiZHkiLCJhZGpDb2wiLCJhZGpSb3ciLCJnZXRBbGxNaXNzZWRDZWxscyIsIm1pc3NlZENlbGxzIiwiY29sIiwiZ2V0TWlzc2VkU2hvdHMiLCJhbGxTaGlwc1N1bmsiLCJwbGFjZVNoaXBzUmFuZG9tbHkiLCJwbGFjZWQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJFbmVteUFpIiwib3Bwb25lbnRCb2FyZCIsImxhc3RIaXQiLCJwb3RlbnRpYWxUYXJnZXRzIiwiYXR0YWNrZWRDZWxscyIsIlNldCIsIm1ha2VNb3ZlIiwibW92ZSIsInRhcmdldEFkamFjZW50Q2VsbHMiLCJyYW5kb21Nb3ZlIiwiYWRkIiwicG9wIiwiaGFzIiwiYWRkQWRqYWNlbnRDZWxscyIsImFkamFjZW50Q2VsbHMiLCJmaWx0ZXIiLCJEb20iLCJwbGF5ZXJCb2FyZCIsImVuZW15Qm9hcmQiLCJhaVBsYXllciIsImlzUGxheWVyVHVybiIsImNyZWF0ZUdyaWQiLCJjb250YWluZXJJZCIsImdhbWVib2FyZCIsImNvbnRhaW5lciIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiY2xhc3NMaXN0IiwiY2VsbCIsImRhdGFzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlQ2VsbENsaWNrIiwiY29udGFpbnMiLCJ1cGRhdGVHcmlkIiwiR2FtZUZpbmFsZSIsInNldFRpbWVvdXQiLCJwbGF5ZXJUdXJuIiwiYWlUdXJuIiwiYWlDb2wiLCJhaVJvdyIsInBsYXllckNlbGwiLCJjZWxscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjcmVhdGVOZXdHYW1lYm9hcmQiLCJnYW1lQ29udGFpbmVyIiwicGxheWVyQm9hcmRDb250YWluZXIiLCJjcmVhdGVCb2FyZENvbnRhaW5lciIsIkVuZW15Qm9hcmRDb250YWluZXIiLCJib2R5Iiwib25GaW5pc2giLCJjdXJyZW50U2hpcEluZGV4IiwiY3VycmVudE9yaWVudGF0aW9uIiwicmVzdGFydCIsInJhbmRvbWl6ZSIsImZpbmlzaFBsYWNlbWVudCIsInJvdGF0ZVNoaXAiLCJjdXJyZW50U2hpcCIsInByZXZpZXdTaGlwIiwiY2xlYXJQcmV2aWV3IiwicHJldmlld1JvdyIsInByZXZpZXdDb2wiLCJpc1ZhbGlkUGxhY2VtZW50IiwicGxhY2VtZW50V2luZG93IiwicGxheWVyQm9hcmRFbGVtZW50IiwidXBkYXRlUGxheWVyQm9hcmQiLCJ0aXRsZSIsInRleHRDb250ZW50IiwiZ3JpZCIsImNyZWF0ZVBsYWNlbWVudEdyaWQiLCJjb250cm9scyIsInJvdGF0ZUJ1dHRvbiIsIlJhbmRvbUJ0biIsInJlc3RhcnRCdXR0b24iLCJjcmVhdGVDb250cm9scyIsImluc2VydEJlZm9yZSIsImNyZWF0ZVBsYWNlbWVudFdpbmRvdyIsIlNoaXBQbGFjZW1lbnRXaW5kb3ciLCJoZWFkZXIiLCJ0b0xvd2VyQ2FzZSIsImZpbmFsZVJlc3VsdCIsInBvaW50ZXJFdmVudHMiLCJzdGFydFVwIiwibmV3R2FtZUJ0biIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==