(()=>{"use strict";var e={106:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([e.id,"*{\n    --water-blue: #3ea4f0;\n    --water-blue-hover:#0a6bbf;\n    --ship-color: #444444;\n    --hit-color: #ff6b6b;\n    --miss-color: #c5c5c5;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f0f0f0;\n}\n\n.main-window{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\nheader{\n    width: 100vw;\n    min-width: 350px;\n    text-align: center;\n    border-bottom: grey solid 2px;\n    align-self: center;\n}\n\n.title{\n    font-size: 2rem;\n    margin: 0;\n    padding: 1rem;\n    background-color: var(--water-blue);\n}\n\n#app{\n    display: flex;\n    flex-direction: column;\n}\n\n#new-game-btn{\n    font-size: 1.5rem;\n    font-weight: bold;\n    text-align: center;\n    margin-top: 1rem;\n    padding: 0.3rem;\n    background-color: var(--water-blue);\n    width: 8rem;\n    align-self: center;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#new-game-btn:hover{\n    background-color: var(--water-blue-hover);\n}\n\n.game-container {\n    display: flex;\n    gap: 3rem;\n    width: 80vw;\n    justify-content: center;\n    flex-flow: row wrap;\n    margin-bottom: 2rem;\n}\n\n.board-container {\n    text-align: center;\n}\n\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    border: 1px solid ;\n    width: 350px;\n    height: 350px;\n}\n\n.cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 24px;\n    font-weight: bold;\n}\n\n#enemy-board > .cell:hover{\n    background-color: var(--water-blue-hover);\n    cursor: pointer;\n}\n\n.ship {\n    background-color: var(--ship-color);\n}\n\n.hit {\n    background-color: var(--hit-color);\n    color: #ffffff;\n    cursor: default;\n    pointer-events: none;\n}\n\n.miss {\n    background-color: var(--miss-color);\n    color: #000000;\n    cursor: default;\n    pointer-events: none;\n}\n\n#finale-result{\n    font-size: 3rem;\n    font-weight: bold;\n    text-align: center;\n    background-color: var(--water-blue);\n    align-self: center;\n    width: 20rem;\n    border-radius: 5px;\n}\n\n/* Ship Placement window */\n.placement-window {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.3);\n    z-index: 1000;\n}\n\n.placement-cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    cursor: pointer;\n}\n\n.placement-cell.preview {\n    background-color: rgba(0, 255, 0, 0.3);\n}\n\n.placement-cell.invalid-preview {\n    background-color: rgb(255, 0, 0);\n}\n\n.placement-cell.ship-placed {\n    background-color: var(--ship-color);\n}\n\n.placement-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.non-interactive {\n    pointer-events: none;\n    filter: blur(10px);\n}","",{version:3,sources:["webpack://./src/style/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,0BAA0B;IAC1B,qBAAqB;IACrB,oBAAoB;IACpB,qBAAqB;AACzB;;AAEA;IACI,8BAA8B;IAC9B,SAAS;IACT,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,SAAS;IACT,aAAa;IACb,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,mCAAmC;IACnC,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,SAAS;IACT,WAAW;IACX,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,kBAAkB;IAClB,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,mCAAmC;IACnC,uBAAuB;IACvB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,yCAAyC;IACzC,eAAe;AACnB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,kCAAkC;IAClC,cAAc;IACd,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,mCAAmC;IACnC,cAAc;IACd,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,mCAAmC;IACnC,kBAAkB;IAClB,YAAY;IACZ,kBAAkB;AACtB;;AAEA,0BAA0B;AAC1B;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,oCAAoC;IACpC,aAAa;AACjB;;AAEA;IACI,mCAAmC;IACnC,uBAAuB;IACvB,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;AACtB",sourcesContent:["*{\n    --water-blue: #3ea4f0;\n    --water-blue-hover:#0a6bbf;\n    --ship-color: #444444;\n    --hit-color: #ff6b6b;\n    --miss-color: #c5c5c5;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f0f0f0;\n}\n\n.main-window{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\nheader{\n    width: 100vw;\n    min-width: 350px;\n    text-align: center;\n    border-bottom: grey solid 2px;\n    align-self: center;\n}\n\n.title{\n    font-size: 2rem;\n    margin: 0;\n    padding: 1rem;\n    background-color: var(--water-blue);\n}\n\n#app{\n    display: flex;\n    flex-direction: column;\n}\n\n#new-game-btn{\n    font-size: 1.5rem;\n    font-weight: bold;\n    text-align: center;\n    margin-top: 1rem;\n    padding: 0.3rem;\n    background-color: var(--water-blue);\n    width: 8rem;\n    align-self: center;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#new-game-btn:hover{\n    background-color: var(--water-blue-hover);\n}\n\n.game-container {\n    display: flex;\n    gap: 3rem;\n    width: 80vw;\n    justify-content: center;\n    flex-flow: row wrap;\n    margin-bottom: 2rem;\n}\n\n.board-container {\n    text-align: center;\n}\n\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    border: 1px solid ;\n    width: 350px;\n    height: 350px;\n}\n\n.cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 24px;\n    font-weight: bold;\n}\n\n#enemy-board > .cell:hover{\n    background-color: var(--water-blue-hover);\n    cursor: pointer;\n}\n\n.ship {\n    background-color: var(--ship-color);\n}\n\n.hit {\n    background-color: var(--hit-color);\n    color: #ffffff;\n    cursor: default;\n    pointer-events: none;\n}\n\n.miss {\n    background-color: var(--miss-color);\n    color: #000000;\n    cursor: default;\n    pointer-events: none;\n}\n\n#finale-result{\n    font-size: 3rem;\n    font-weight: bold;\n    text-align: center;\n    background-color: var(--water-blue);\n    align-self: center;\n    width: 20rem;\n    border-radius: 5px;\n}\n\n/* Ship Placement window */\n.placement-window {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.3);\n    z-index: 1000;\n}\n\n.placement-cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    cursor: pointer;\n}\n\n.placement-cell.preview {\n    background-color: rgba(0, 255, 0, 0.3);\n}\n\n.placement-cell.invalid-preview {\n    background-color: rgb(255, 0, 0);\n}\n\n.placement-cell.ship-placed {\n    background-color: var(--ship-color);\n}\n\n.placement-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.non-interactive {\n    pointer-events: none;\n    filter: blur(10px);\n}"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],d=i[c]||0,A="".concat(c," ").concat(d);i[c]=d+1;var u=t(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var h=o(p,r);r.byIndex=s,n.splice(s,0,{identifier:A,updater:h,references:1})}a.push(A)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=r(e,o),c=0;c<i.length;c++){var d=t(i[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=l}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r=t(72),o=t.n(r),i=t(825),a=t.n(i),s=t(659),l=t.n(s),c=t(56),d=t.n(c),A=t(540),u=t.n(A),p=t(113),h=t.n(p),m=t(106),f={};f.styleTagTransform=h(),f.setAttributes=d(),f.insert=l().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),o()(m.A,f),m.A&&m.A.locals&&m.A.locals;class C{constructor(e,n,t){this.name=e,this.shipLength=n,this.hitPositions=new Set,this.orientation=t}getLength(){return this.shipLength}getName(){return this.name}getNumberOfHits(){return this.hitPositions.size}isSunk(){return this.hitPositions.size>=this.shipLength}getHit(e){this.hitPositions.add(e),this.isSunk()}isVertical(){return"vertical"===this.orientation}}class g{constructor(e){this.ships=[],this.GRID_SIZE=10,this.name=e,this.board=[],this.missedShots=[],this.initialize()}initialize(){this.board=[],this.missedShots=[];for(let e=0;e<this.GRID_SIZE;e++){this.board[e]=[],this.missedShots[e]=[];for(let n=0;n<this.GRID_SIZE;n++)this.board[e][n]=null,this.missedShots[e][n]=null}this.ships=[]}getName(){return this.name}placeShip(e,n,t){let r=[];if(!0===e.isVertical()){if(t+e.getLength()>this.GRID_SIZE||n<0||t<0)return!1;for(let r=0;r<e.getLength();r++)if(!this.isCellAvailable(n,t+r))return!1;for(let o=0;o<e.getLength();o++)this.board[n][t+o]=e,r.push([n,t+o])}else{if(n+e.getLength()>this.GRID_SIZE||n<0||t<0)return!1;for(let r=0;r<e.getLength();r++)if(!this.isCellAvailable(n+r,t))return!1;for(let o=0;o<e.getLength();o++)this.board[n+o][t]=e,r.push([n+o,t])}return this.ships.push({ship:e,places:r}),!0}isWithinBounds(e,n){return e>=0&&e<this.GRID_SIZE&&n>=0&&n<this.GRID_SIZE}isCellAvailable(e,n){if(null!==this.board[e][n])return!1;for(let t=-1;t<=1;t++)for(let r=-1;r<=1;r++){const o=e+t,i=n+r;if(this.isWithinBounds(o,i)&&null!==this.board[o][i])return!1}return!0}getShipAt(e,n){return this.board[e][n]}receiveAttack(e,n){const t=this.getShipAt(e,n);if(null===t)return this.missedShots[e][n]=!0,!1;if(t.getHit(`${e},${n}`),console.log(this.ships.length),t.isSunk()){const e=this.ships.find((e=>e.ship===t));if(e){const n=e.places.every((([e,n])=>t.hitPositions.has(`${e},${n}`)));n&&this.markAdjacentCells(t)}}return!0}markAdjacentCells(e){const n=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];this.ships.forEach((t=>{t.ship===e&&t.places.forEach((t=>{n.forEach((([n,r])=>{const o=t[0]+n,i=t[1]+r;this.isWithinBounds(o,i)&&this.getShipAt(o,i)!==e&&(this.missedShots[o][i]=!0)}))}))}))}getAllMissedCells(){let e=[];for(let n=0;n<this.GRID_SIZE;n++)for(let t=0;t<this.GRID_SIZE;t++)this.missedShots[n][t]&&e.push([n,t]);return e}getMissedShots(){return this.missedShots}allShipsSunk(){return this.ships.every((({ship:e})=>e.isSunk()))}placeShipsRandomly(){this.initialize(),[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}].forEach((e=>{let n=!1,t=0;for(;!n&&t<100;){const r=Math.floor(Math.random()*this.GRID_SIZE),o=Math.floor(Math.random()*this.GRID_SIZE),i=Math.random()<.5?"horizontal":"vertical",a=new C(e.name,e.length,i);this.placeShip(a,r,o)&&(n=!0),t++}n||console.error(`Failed to place ${e.name}`)}))}getBoard(){return this.board}}class v{constructor(e){this.opponentBoard=e,this.GRID_SIZE=10,this.lastHit=null,this.potentialTargets=[],this.attackedCells=new Set}makeMove(){let e;return e=this.lastHit&&this.potentialTargets.length>0?this.targetAdjacentCells():this.randomMove(),this.attackedCells.add(`${e[0]},${e[1]}`),this.opponentBoard.allShipsSunk()&&console.log("AI: All ships are sunk. Game over!"),e}targetAdjacentCells(){for(;this.potentialTargets.length>0;){const e=this.potentialTargets.pop();if(!this.attackedCells.has(`${e[0]},${e[1]}`))return this.opponentBoard.receiveAttack(e[0],e[1])&&(this.opponentBoard.getShipAt(e[0],e[1]).isSunk()?(this.lastHit=null,this.potentialTargets=[]):(this.lastHit=e,this.addAdjacentCells(e))),e}return this.lastHit=null,this.randomMove()}randomMove(){let e;do{e=[Math.floor(Math.random()*this.GRID_SIZE),Math.floor(Math.random()*this.GRID_SIZE)]}while(this.attackedCells.has(`${e[0]},${e[1]}`));const n=this.opponentBoard.receiveAttack(e[0],e[1]);return console.log(n),n&&(this.lastHit=e,this.addAdjacentCells(e)),e}addAdjacentCells(e){const[n,t]=e;[[n-1,t],[n+1,t],[n,t-1],[n,t+1]].forEach((([e,n])=>{e>=0&&e<this.GRID_SIZE&&n>=0&&n<this.GRID_SIZE&&!this.attackedCells.has(`${e},${n}`)&&this.potentialTargets.push([e,n])}))}}function b(){const e=10;let n,t,r,o;function i(n,t){const r=document.getElementById(`${n}-board`);if(r){r.innerHTML="",r.classList.add("board");for(let o=0;o<e;o++)for(let i=0;i<e;i++){const e=document.createElement("div");e.classList.add("cell"),e.classList.add(`${n}-cell`),e.dataset.row=i.toString(),e.dataset.col=o.toString(),"enemy"===n&&e.addEventListener("click",(()=>a(o,i,t,e))),r.appendChild(e)}}}function a(e,n,t,r){if(!o||r.classList.contains("hit")||r.classList.contains("miss"))return;o=!1;const i=t.receiveAttack(e,n);if(function(e,n){e.classList.remove("hit","miss"),n?(e.classList.add("hit"),e.textContent="×"):(e.classList.add("miss"),e.textContent="○")}(r,i),i){const r=t.getShipAt(e,n);if(r&&r.isSunk()&&(console.log(r.getName()+" is sunk"),c("enemy",t)),t.allShipsSunk())return void u(t);setTimeout((()=>{o=!0,s()}),500)}else setTimeout(l,500)}function s(){o=!0}function l(){if(o)return;const[e,t]=r.makeMove(),i=document.querySelector(`.player-cell[data-col="${e}"][data-row="${t}"]`),a=n.getShipAt(e,t);if(n.receiveAttack(e,t),a){if(i.classList.remove("miss"),i.classList.add("hit"),i.textContent="×",c("player",n),n.allShipsSunk())return void u(n);setTimeout(l,500)}else i.classList.add("miss"),i.textContent="○",c("player",n),o=!0,s()}function c(n,t){const r=document.getElementById(`${n}-board`);if(!r)return;const o=r.querySelectorAll(".cell");for(let n=0;n<e;n++)for(let r=0;r<e;r++)if(t.getShipAt(n,r)){const t=o[n*e+r];t.classList.contains("hit")&&(t.textContent="×")}t.getAllMissedCells().forEach((([n,t])=>{const r=o[n*e+t];r.classList.contains("hit")||(r.classList.add("miss"),r.textContent="○")}))}function d(){!function(){let e=document.querySelectorAll(".game-container");document.getElementById("finale-result").textContent="",e.forEach((e=>{e.remove()}))}();const e=document.createElement("div");e.classList.add("game-container");const a=A("Player"),s=A("Enemy");e.appendChild(a),e.appendChild(s),(document.getElementById("app")||document.body).appendChild(e),n=new g("player"),t=new g("enemy"),i("player",n),t.placeShipsRandomly(),function(e,n){document.querySelector(".main-window").classList.add("non-interactive");const t=10,r=[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}];let o=0,i="vertical";function a(){o=0,e=new g("player"),document.querySelectorAll(".placement-cell").forEach((e=>{e.classList.remove("ship-placed")}))}function s(){(e=new g("player")).placeShipsRandomly();const n=document.querySelectorAll(".placement-cell");n.forEach((e=>e.classList.remove("ship-placed")));for(let r=0;r<t;r++)for(let o=0;o<t;o++)e.getShipAt(r,o)&&n[r*t+o].classList.add("ship-placed");p()}function l(){i="horizontal"===i?"vertical":"horizontal"}function c(n,a){const s=r[o],l=new C(s.name,s.length,i);e.placeShip(l,n,a)&&(function(e,n){const a=r[o],s=document.querySelectorAll(".placement-cell");if("vertical"==i)for(let r=0;r<a.length;r++)s[e*t+(n+r)].classList.add("ship-placed");if("horizontal"==i)for(let r=0;r<a.length;r++)s[(e+r)*t+n].classList.add("ship-placed")}(n,a),o++,o>=r.length&&p())}function d(e,n){u();const a=r[o],s=document.querySelectorAll(".placement-cell");for(let r=0;r<a.length;r++){const o="vertical"===i?n+r:n,l="horizontal"===i?e+r:e;if(o<t&&l<t){const r=l*t+o;A(n,e,a.length)?s[r].classList.add("preview"):s[r].classList.add("invalid-preview")}}}function A(e,n,r){return"horizontal"===i?n+r<=t:e+r<=t}function u(){document.querySelectorAll(".placement-cell").forEach((e=>{e.classList.remove("preview"),e.classList.remove("invalid-preview")}))}function p(){var r;const o=document.querySelector(".placement-window");o&&o.remove(),null===(r=document.querySelector(".main-window"))||void 0===r||r.classList.remove("non-interactive"),function(){const n=document.getElementById("player-board");if(!n)return;const r=n.querySelectorAll(".cell");r.forEach((e=>e.classList.remove("ship")));for(let n=0;n<t;n++)for(let o=0;o<t;o++)e.getShipAt(n,o)&&r[n*t+o].classList.add("ship")}(),n(e)}!function(){const e=document.createElement("div");e.classList.add("placement-window");const n=document.createElement("h2");n.textContent="Place Your Ships",e.appendChild(n);const r=function(){const e=document.createElement("div");e.classList.add("board"),e.classList.add("placement-board");for(let n=0;n<t;n++)for(let r=0;r<t;r++){const t=document.createElement("div");t.classList.add("placement-cell"),t.dataset.row=r.toString(),t.dataset.col=n.toString(),t.addEventListener("click",(()=>c(n,r))),t.addEventListener("mouseover",(()=>d(n,r))),t.addEventListener("mouseout",u),e.appendChild(t)}return e}();e.appendChild(r);const o=function(){const e=document.createElement("div");e.classList.add("placement-controls");const n=document.createElement("button");n.textContent="Rotate Ship",n.addEventListener("click",l),e.appendChild(n);const t=document.createElement("button");t.textContent="Randomize",t.addEventListener("click",s),e.appendChild(t);const r=document.createElement("button");return r.textContent="Restart",r.addEventListener("click",a),e.appendChild(r),e}();e.appendChild(o),document.body.insertBefore(e,document.body.firstChild)}()}(n,(e=>{i("enemy",t),n=e,r=new v(n),o=!0}))}function A(e){const n=document.createElement("div");n.classList.add("board-container");const t=document.createElement("h2");t.textContent=`${e} board`;const r=document.createElement("div");return r.id=`${e.toLowerCase()}-board`,r.classList.add("board"),n.appendChild(t),n.appendChild(r),n}function u(e){const n=document.querySelector(".game-container"),t=document.getElementById("finale-result"),r="player"===e.getName()?"AI":"Player";t.textContent=`${r} Wins`,alert(`${r} wins!`),n.style.pointerEvents="none"}return{startUp:function(){d();const e=document.getElementById("new-game-btn");e?e.addEventListener("click",d):console.error("New game button not found")}}}document.addEventListener("DOMContentLoaded",(()=>{b().startUp()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TCxFQUFPbEQsWUFBYyxHQUFHc0MsVUFDeEIsTUFBTWpILEVBQVFyRSxTQUFTVyxjQUFjLE9BS3JDLE9BSkEwRCxFQUFNeEksR0FBSyxHQUFHeVAsRUFBTWEsc0JBQ3BCOUgsRUFBTW9FLFVBQVV6RSxJQUFJLFNBQ3BCc0UsRUFBVTdILFlBQVl5TCxHQUN0QjVELEVBQVU3SCxZQUFZNEQsR0FDZmlFLENBQ1gsQ0FzQkEsU0FBU2EsRUFBV2QsR0FDaEIsTUFBTTJCLEVBQWdCaEssU0FBU0MsY0FBYyxtQkFDdkNtTSxFQUFlcE0sU0FBU3VJLGVBQWUsaUJBQ3ZDOEQsRUFBaUMsV0FBeEJoRSxFQUFVM0UsVUFBeUIsS0FBTyxTQUN6RDBJLEVBQWFwRCxZQUFjLEdBQUdxRCxTQUM5QkMsTUFBTSxHQUFHRCxXQUNUckMsRUFBY25LLE1BQU0wTSxjQUFnQixNQUN4QyxDQUNBLE1BQU8sQ0FDSEMsUUFwQkosV0FDSTNDLElBQ0EsTUFBTTRDLEVBQWF6TSxTQUFTdUksZUFBZSxnQkFDdkNrRSxFQUNBQSxFQUFXN0QsaUJBQWlCLFFBQVNpQixHQUdyQ3pFLFFBQVEyQixNQUFNLDRCQUV0QixFQWFKLENFcE1JL0csU0FBUzRJLGlCQUFpQixvQkFBb0IsS0FDOUJkLElBQ1IwRSxTQUFTLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc3R5bGUvc3R5bGUuY3NzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc3R5bGUvc3R5bGUuY3NzP2M5ZjAiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvU2hpcC50cyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9HYW1lYm9hcmQudHMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvRW5lbXlBaS50cyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9Eb20udHMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvU2hpcFBsYWNlbWVudFdpbmRvdy50cyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCp7XG4gICAgLS13YXRlci1ibHVlOiAjM2VhNGYwO1xuICAgIC0td2F0ZXItYmx1ZS1ob3ZlcjojMGE2YmJmO1xuICAgIC0tc2hpcC1jb2xvcjogIzQ0NDQ0NDtcbiAgICAtLWhpdC1jb2xvcjogI2ZmNmI2YjtcbiAgICAtLW1pc3MtY29sb3I6ICNjNWM1YzU7XG59XG5cbmJvZHkge1xuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xufVxuXG4ubWFpbi13aW5kb3d7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbmhlYWRlcntcbiAgICB3aWR0aDogMTAwdnc7XG4gICAgbWluLXdpZHRoOiAzNTBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYm9yZGVyLWJvdHRvbTogZ3JleSBzb2xpZCAycHg7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xufVxuXG4udGl0bGV7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAxcmVtO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xufVxuXG4jYXBwe1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuI25ldy1nYW1lLWJ0bntcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICBwYWRkaW5nOiAwLjNyZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZSk7XG4gICAgd2lkdGg6IDhyZW07XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbiNuZXctZ2FtZS1idG46aG92ZXJ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZS1ob3Zlcik7XG59XG5cbi5nYW1lLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6IDNyZW07XG4gICAgd2lkdGg6IDgwdnc7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xufVxuXG4uYm9hcmQtY29udGFpbmVyIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5ib2FyZCB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgMWZyKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCA7XG4gICAgd2lkdGg6IDM1MHB4O1xuICAgIGhlaWdodDogMzUwcHg7XG59XG5cbi5jZWxsIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICBhc3BlY3QtcmF0aW86IDE7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuI2VuZW15LWJvYXJkID4gLmNlbGw6aG92ZXJ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZS1ob3Zlcik7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc2hpcCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2hpcC1jb2xvcik7XG59XG5cbi5oaXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpdC1jb2xvcik7XG4gICAgY29sb3I6ICNmZmZmZmY7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4ubWlzcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlzcy1jb2xvcik7XG4gICAgY29sb3I6ICMwMDAwMDA7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4jZmluYWxlLXJlc3VsdHtcbiAgICBmb250LXNpemU6IDNyZW07XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICB3aWR0aDogMjByZW07XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xufVxuXG4vKiBTaGlwIFBsYWNlbWVudCB3aW5kb3cgKi9cbi5wbGFjZW1lbnQtd2luZG93IHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiA1MCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsMCwwLDAuMyk7XG4gICAgei1pbmRleDogMTAwMDtcbn1cblxuLnBsYWNlbWVudC1jZWxsIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICBhc3BlY3QtcmF0aW86IDE7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4ucGxhY2VtZW50LWNlbGwucHJldmlldyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAyNTUsIDAsIDAuMyk7XG59XG5cbi5wbGFjZW1lbnQtY2VsbC5pbnZhbGlkLXByZXZpZXcge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDAsIDApO1xufVxuXG4ucGxhY2VtZW50LWNlbGwuc2hpcC1wbGFjZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNoaXAtY29sb3IpO1xufVxuXG4ucGxhY2VtZW50LWNvbnRyb2xzIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4ubm9uLWludGVyYWN0aXZlIHtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICBmaWx0ZXI6IGJsdXIoMTBweCk7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0kscUJBQXFCO0lBQ3JCLDBCQUEwQjtJQUMxQixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLDhCQUE4QjtJQUM5QixTQUFTO0lBQ1QsVUFBVTtJQUNWLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLDZCQUE2QjtJQUM3QixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsU0FBUztJQUNULGFBQWE7SUFDYixtQ0FBbUM7QUFDdkM7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixtQ0FBbUM7SUFDbkMsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHlDQUF5QztBQUM3Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixTQUFTO0lBQ1QsV0FBVztJQUNYLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNDQUFzQztJQUN0QyxtQ0FBbUM7SUFDbkMsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksbUNBQW1DO0lBQ25DLHVCQUF1QjtJQUN2QixlQUFlO0lBQ2YsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLHlDQUF5QztJQUN6QyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksbUNBQW1DO0FBQ3ZDOztBQUVBO0lBQ0ksa0NBQWtDO0lBQ2xDLGNBQWM7SUFDZCxlQUFlO0lBQ2Ysb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksbUNBQW1DO0lBQ25DLGNBQWM7SUFDZCxlQUFlO0lBQ2Ysb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsbUNBQW1DO0lBQ25DLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osa0JBQWtCO0FBQ3RCOztBQUVBLDBCQUEwQjtBQUMxQjtJQUNJLGVBQWU7SUFDZixRQUFRO0lBQ1IsU0FBUztJQUNULGdDQUFnQztJQUNoQyx1QkFBdUI7SUFDdkIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixvQ0FBb0M7SUFDcEMsYUFBYTtBQUNqQjs7QUFFQTtJQUNJLG1DQUFtQztJQUNuQyx1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxzQ0FBc0M7QUFDMUM7O0FBRUE7SUFDSSxnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxtQ0FBbUM7QUFDdkM7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKntcXG4gICAgLS13YXRlci1ibHVlOiAjM2VhNGYwO1xcbiAgICAtLXdhdGVyLWJsdWUtaG92ZXI6IzBhNmJiZjtcXG4gICAgLS1zaGlwLWNvbG9yOiAjNDQ0NDQ0O1xcbiAgICAtLWhpdC1jb2xvcjogI2ZmNmI2YjtcXG4gICAgLS1taXNzLWNvbG9yOiAjYzVjNWM1O1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcblxcbi5tYWluLXdpbmRvd3tcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbmhlYWRlcntcXG4gICAgd2lkdGg6IDEwMHZ3O1xcbiAgICBtaW4td2lkdGg6IDM1MHB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJvcmRlci1ib3R0b206IGdyZXkgc29saWQgMnB4O1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxufVxcblxcbi50aXRsZXtcXG4gICAgZm9udC1zaXplOiAycmVtO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDFyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xcbn1cXG5cXG4jYXBwe1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4jbmV3LWdhbWUtYnRue1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcXG4gICAgcGFkZGluZzogMC4zcmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcXG4gICAgd2lkdGg6IDhyZW07XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbiNuZXctZ2FtZS1idG46aG92ZXJ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUtaG92ZXIpO1xcbn1cXG5cXG4uZ2FtZS1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDNyZW07XFxuICAgIHdpZHRoOiA4MHZ3O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZmxleC1mbG93OiByb3cgd3JhcDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG59XFxuXFxuLmJvYXJkLWNvbnRhaW5lciB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmJvYXJkIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCA7XFxuICAgIHdpZHRoOiAzNTBweDtcXG4gICAgaGVpZ2h0OiAzNTBweDtcXG59XFxuXFxuLmNlbGwge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICAgIGFzcGVjdC1yYXRpbzogMTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMjRweDtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbiNlbmVteS1ib2FyZCA+IC5jZWxsOmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlLWhvdmVyKTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uc2hpcCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNoaXAtY29sb3IpO1xcbn1cXG5cXG4uaGl0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taGl0LWNvbG9yKTtcXG4gICAgY29sb3I6ICNmZmZmZmY7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5taXNzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlzcy1jb2xvcik7XFxuICAgIGNvbG9yOiAjMDAwMDAwO1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4jZmluYWxlLXJlc3VsdHtcXG4gICAgZm9udC1zaXplOiAzcmVtO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICB3aWR0aDogMjByZW07XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG59XFxuXFxuLyogU2hpcCBQbGFjZW1lbnQgd2luZG93ICovXFxuLnBsYWNlbWVudC13aW5kb3cge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHRvcDogNTAlO1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLDAsMCwwLjMpO1xcbiAgICB6LWluZGV4OiAxMDAwO1xcbn1cXG5cXG4ucGxhY2VtZW50LWNlbGwge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICAgIGFzcGVjdC1yYXRpbzogMTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucGxhY2VtZW50LWNlbGwucHJldmlldyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMjU1LCAwLCAwLjMpO1xcbn1cXG5cXG4ucGxhY2VtZW50LWNlbGwuaW52YWxpZC1wcmV2aWV3IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMCwgMCk7XFxufVxcblxcbi5wbGFjZW1lbnQtY2VsbC5zaGlwLXBsYWNlZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNoaXAtY29sb3IpO1xcbn1cXG5cXG4ucGxhY2VtZW50LWNvbnRyb2xzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubm9uLWludGVyYWN0aXZlIHtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIGZpbHRlcjogYmx1cigxMHB4KTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvLyBTaGlwIGNsYXNzIHJlcHJlc2VudHMgYSBzaGlwIGluIHRoZSBCYXR0bGVzaGlwIGdhbWVcbmV4cG9ydCBjbGFzcyBTaGlwIHtcbiAgICAvLyBDb25zdHJ1Y3RvciBpbml0aWFsaXplcyBhIHNoaXAgd2l0aCBhIGdpdmVuIGxlbmd0aFxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGxlbmd0aCwgb3JpZW50YXRpb24pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zaGlwTGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLmhpdFBvc2l0aW9ucyA9IG5ldyBTZXQoKTsgLy8gSW5pdGlhbGl6ZSBlbXB0eSBzZXQgb2YgaGl0IHBvc2l0aW9uc1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgc2hpcFxuICAgIGdldExlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hpcExlbmd0aDtcbiAgICB9XG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGhpdHMgdGhlIHNoaXAgaGFzIHRha2VuXG4gICAgZ2V0TnVtYmVyT2ZIaXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaXRQb3NpdGlvbnMuc2l6ZTtcbiAgICB9XG4gICAgLy8gQ2hlY2tzIGlmIHRoZSBzaGlwIGlzIHN1bmtcbiAgICBpc1N1bmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpdFBvc2l0aW9ucy5zaXplID49IHRoaXMuc2hpcExlbmd0aDtcbiAgICB9XG4gICAgLy8gUmVnaXN0ZXJzIGEgaGl0IG9uIHRoZSBzaGlwIGFuZCBjaGVja3MgaWYgaXQncyBzdW5rXG4gICAgZ2V0SGl0KHBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuaGl0UG9zaXRpb25zLmFkZChwb3NpdGlvbik7XG4gICAgICAgIHRoaXMuaXNTdW5rKCk7XG4gICAgfVxuICAgIGlzVmVydGljYWwoKSB7XG4gICAgICAgIGlmICh0aGlzLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTaGlwIH0gZnJvbSAnLi9TaGlwJztcbi8vIEdhbWVib2FyZCBjbGFzcyByZXByZXNlbnRzIHRoZSBnYW1lIGJvYXJkIGZvciBhIHBsYXllclxuZXhwb3J0IGNsYXNzIEdhbWVib2FyZCB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICB0aGlzLnNoaXBzID0gW107XG4gICAgICAgIHRoaXMuR1JJRF9TSVpFID0gMTA7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuYm9hcmQgPSBbXTtcbiAgICAgICAgdGhpcy5taXNzZWRTaG90cyA9IFtdO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5ib2FyZCA9IFtdO1xuICAgICAgICB0aGlzLm1pc3NlZFNob3RzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5HUklEX1NJWkU7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5ib2FyZFtpXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5taXNzZWRTaG90c1tpXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLkdSSURfU0laRTsgaisrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFtpXVtqXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5taXNzZWRTaG90c1tpXVtqXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaGlwcyA9IFtdO1xuICAgIH1cbiAgICBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cbiAgICAvLyBQbGFjZSBhIHNoaXAgb24gdGhlIGJvYXJkIHdpdGggYWRkaXRpb25hbCBjaGVja3NcbiAgICBwbGFjZVNoaXAoc2hpcCwgY29sdW1uLCByb3cpIHtcbiAgICAgICAgbGV0IHBsYWNlcyA9IFtdO1xuICAgICAgICBpZiAoc2hpcC5pc1ZlcnRpY2FsKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHNoaXAgcGxhY2VtZW50IGlzIHdpdGhpbiBib3VuZHNcbiAgICAgICAgICAgIGlmIChyb3cgKyBzaGlwLmdldExlbmd0aCgpID4gdGhpcy5HUklEX1NJWkUgfHwgY29sdW1uIDwgMCB8fCByb3cgPCAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBvdmVybGFwIGFuZCBvbmUtY2VsbCBkaXN0YW5jZVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmdldExlbmd0aCgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDZWxsQXZhaWxhYmxlKGNvbHVtbiwgcm93ICsgaSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBsYWNlIHRoZSBzaGlwIGFmdGVyIHN1Y2Nlc3NmdWwgY2hlY2tzXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbY29sdW1uXVtyb3cgKyBpXSA9IHNoaXA7XG4gICAgICAgICAgICAgICAgcGxhY2VzLnB1c2goW2NvbHVtbiwgcm93ICsgaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgc2hpcCBwbGFjZW1lbnQgaXMgd2l0aGluIGJvdW5kc1xuICAgICAgICAgICAgaWYgKGNvbHVtbiArIHNoaXAuZ2V0TGVuZ3RoKCkgPiB0aGlzLkdSSURfU0laRSB8fCBjb2x1bW4gPCAwIHx8IHJvdyA8IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJsYXAgYW5kIG9uZS1jZWxsIGRpc3RhbmNlXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0NlbGxBdmFpbGFibGUoY29sdW1uICsgaSwgcm93KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGxhY2UgdGhlIHNoaXAgYWZ0ZXIgc3VjY2Vzc2Z1bCBjaGVja3NcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5nZXRMZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFtjb2x1bW4gKyBpXVtyb3ddID0gc2hpcDtcbiAgICAgICAgICAgICAgICBwbGFjZXMucHVzaChbY29sdW1uICsgaSwgcm93XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaGlwcy5wdXNoKHtcbiAgICAgICAgICAgIHNoaXA6IHNoaXAsXG4gICAgICAgICAgICBwbGFjZXM6IHBsYWNlc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIEhlbHBlciB0byBjaGVjayBpZiBhIHBvc2l0aW9uIGlzIHdpdGhpbiB0aGUgZ2FtZSBib2FyZCBib3VuZHNcbiAgICBpc1dpdGhpbkJvdW5kcyhjb2x1bW4sIHJvdykge1xuICAgICAgICByZXR1cm4gY29sdW1uID49IDAgJiYgY29sdW1uIDwgdGhpcy5HUklEX1NJWkUgJiYgcm93ID49IDAgJiYgcm93IDwgdGhpcy5HUklEX1NJWkU7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIGEgY2VsbCBpcyBhdmFpbGFibGUgKG5vIG92ZXJsYXApIGFuZCBoYXMgYXQgbGVhc3Qgb25lIGNlbGwgZGlzdGFuY2VcbiAgICBpc0NlbGxBdmFpbGFibGUoY29sdW1uLCByb3cpIHtcbiAgICAgICAgaWYgKHRoaXMuYm9hcmRbY29sdW1uXVtyb3ddICE9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBDaGVjayBpZiB0aGVyZSdzIGFscmVhZHkgYSBzaGlwXG4gICAgICAgIC8vIENoZWNrIHN1cnJvdW5kaW5nIGNlbGxzIGZvciBvbmUtY2VsbCBkaXN0YW5jZVxuICAgICAgICBmb3IgKGxldCBpID0gLTE7IGkgPD0gMTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gLTE7IGogPD0gMTsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tDb2wgPSBjb2x1bW4gKyBpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrUm93ID0gcm93ICsgajtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1dpdGhpbkJvdW5kcyhjaGVja0NvbCwgY2hlY2tSb3cpICYmIHRoaXMuYm9hcmRbY2hlY2tDb2xdW2NoZWNrUm93XSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEEgc2hpcCBpcyB0b28gY2xvc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIEdldCB0aGUgc2hpcCBhdCBhIHNwZWNpZmljIHBvc2l0aW9uXG4gICAgZ2V0U2hpcEF0KGNvbHVtbiwgcm93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvYXJkW2NvbHVtbl1bcm93XTtcbiAgICB9XG4gICAgLy8gUmVjZWl2ZSBhbiBhdHRhY2sgYXQgYSBzcGVjaWZpYyBwb3NpdGlvblxuICAgIHJlY2VpdmVBdHRhY2soY29sdW1uLCByb3cpIHtcbiAgICAgICAgY29uc3Qgc2hpcCA9IHRoaXMuZ2V0U2hpcEF0KGNvbHVtbiwgcm93KTtcbiAgICAgICAgaWYgKHNoaXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMubWlzc2VkU2hvdHNbY29sdW1uXVtyb3ddID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUcmFjayBoaXRcbiAgICAgICAgc2hpcC5nZXRIaXQoYCR7Y29sdW1ufSwke3Jvd31gKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zaGlwcy5sZW5ndGgpO1xuICAgICAgICAvLyBWZXJpZnkgaWYgdGhlIHNoaXAgaXMgc3Vua1xuICAgICAgICBpZiAoc2hpcC5pc1N1bmsoKSkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcEluZm8gPSB0aGlzLnNoaXBzLmZpbmQoKHMpID0+IHMuc2hpcCA9PT0gc2hpcCk7XG4gICAgICAgICAgICBpZiAoc2hpcEluZm8pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGxQb3NpdGlvbnNIaXQgPSBzaGlwSW5mby5wbGFjZXMuZXZlcnkoKFtjb2wsIHJvd10pID0+IHNoaXAuaGl0UG9zaXRpb25zLmhhcyhgJHtjb2x9LCR7cm93fWApKTtcbiAgICAgICAgICAgICAgICBpZiAoYWxsUG9zaXRpb25zSGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFya0FkamFjZW50Q2VsbHMoc2hpcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBtYXJrQWRqYWNlbnRDZWxscyhzaGlwKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbWy0xLCAtMV0sIFstMSwgMF0sIFstMSwgMV0sIFswLCAtMV0sIFswLCAxXSwgWzEsIC0xXSwgWzEsIDBdLCBbMSwgMV1dO1xuICAgICAgICB0aGlzLnNoaXBzLmZvckVhY2goKHNoaXBJbmZvKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2hpcEluZm8uc2hpcCA9PT0gc2hpcCkge1xuICAgICAgICAgICAgICAgIHNoaXBJbmZvLnBsYWNlcy5mb3JFYWNoKChwbGFjZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25zLmZvckVhY2goKFtkeCwgZHldKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGpDb2wgPSBwbGFjZVswXSArIGR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRqUm93ID0gcGxhY2VbMV0gKyBkeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzV2l0aGluQm91bmRzKGFkakNvbCwgYWRqUm93KSAmJiB0aGlzLmdldFNoaXBBdChhZGpDb2wsIGFkalJvdykgIT09IHNoaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pc3NlZFNob3RzW2FkakNvbF1bYWRqUm93XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gTmV3IG1ldGhvZCB0byBnZXQgYWxsIGNlbGxzIHRoYXQgc2hvdWxkIGJlIG1hcmtlZCBhcyAnbWlzcydcbiAgICBnZXRBbGxNaXNzZWRDZWxscygpIHtcbiAgICAgICAgbGV0IG1pc3NlZENlbGxzID0gW107XG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IHRoaXMuR1JJRF9TSVpFOyBjb2wrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgdGhpcy5HUklEX1NJWkU7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWlzc2VkU2hvdHNbY29sXVtyb3ddKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pc3NlZENlbGxzLnB1c2goW2NvbCwgcm93XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaXNzZWRDZWxscztcbiAgICB9XG4gICAgLy8gR2V0IGFsbCBtaXNzZWQgYXR0YWNrc1xuICAgIGdldE1pc3NlZFNob3RzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taXNzZWRTaG90cztcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgYWxsIHNoaXBzIGFyZSBzdW5rXG4gICAgYWxsU2hpcHNTdW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGlwcy5ldmVyeSgoeyBzaGlwIH0pID0+IHNoaXAuaXNTdW5rKCkpO1xuICAgIH1cbiAgICAvL01ldGhvZCB0byBwbGFjZSBzaGlwcyByYW5kb21seVxuICAgIHBsYWNlU2hpcHNSYW5kb21seSgpIHtcbiAgICAgICAgLy8gUmVzZXQgdGhlIGJvYXJkIGFuZCBjb3VudGVycyBmaXJzdFxuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICAgICAgY29uc3Qgc2hpcHMgPSBbXG4gICAgICAgICAgICB7IG5hbWU6ICdDYXJyaWVyJywgbGVuZ3RoOiA1IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdCYXR0bGVzaGlwJywgbGVuZ3RoOiA0IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdDcnVpc2VyJywgbGVuZ3RoOiAzIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdTdWJtYXJpbmUnLCBsZW5ndGg6IDMgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0Rlc3Ryb3llcicsIGxlbmd0aDogMiB9XG4gICAgICAgIF07XG4gICAgICAgIHNoaXBzLmZvckVhY2goc2hpcEluZm8gPT4ge1xuICAgICAgICAgICAgbGV0IHBsYWNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGF0dGVtcHRzID0gMDtcbiAgICAgICAgICAgIGNvbnN0IG1heEF0dGVtcHRzID0gMTAwOyAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3BzXG4gICAgICAgICAgICB3aGlsZSAoIXBsYWNlZCAmJiBhdHRlbXB0cyA8IG1heEF0dGVtcHRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5HUklEX1NJWkUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuR1JJRF9TSVpFKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IE1hdGgucmFuZG9tKCkgPCAwLjUgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBuZXcgU2hpcChzaGlwSW5mby5uYW1lLCBzaGlwSW5mby5sZW5ndGgsIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGFjZVNoaXAoc2hpcCwgY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF0dGVtcHRzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXBsYWNlZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBwbGFjZSAke3NoaXBJbmZvLm5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRCb2FyZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9hcmQ7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEVuZW15QWkge1xuICAgIGNvbnN0cnVjdG9yKG9wcG9uZW50Qm9hcmQpIHtcbiAgICAgICAgdGhpcy5vcHBvbmVudEJvYXJkID0gb3Bwb25lbnRCb2FyZDtcbiAgICAgICAgdGhpcy5HUklEX1NJWkUgPSAxMDtcbiAgICAgICAgdGhpcy5sYXN0SGl0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wb3RlbnRpYWxUYXJnZXRzID0gW107XG4gICAgICAgIHRoaXMuYXR0YWNrZWRDZWxscyA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgbWFrZU1vdmUoKSB7XG4gICAgICAgIGxldCBtb3ZlO1xuICAgICAgICBpZiAodGhpcy5sYXN0SGl0ICYmIHRoaXMucG90ZW50aWFsVGFyZ2V0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBtb3ZlID0gdGhpcy50YXJnZXRBZGphY2VudENlbGxzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtb3ZlID0gdGhpcy5yYW5kb21Nb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRhY2tlZENlbGxzLmFkZChgJHttb3ZlWzBdfSwke21vdmVbMV19YCk7XG4gICAgICAgIC8vIENoZWNrIGlmIGFsbCBzaGlwcyBhcmUgc3Vua1xuICAgICAgICBpZiAodGhpcy5vcHBvbmVudEJvYXJkLmFsbFNoaXBzU3VuaygpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFJOiBBbGwgc2hpcHMgYXJlIHN1bmsuIEdhbWUgb3ZlciFcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vdmU7XG4gICAgfVxuICAgIHRhcmdldEFkamFjZW50Q2VsbHMoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLnBvdGVudGlhbFRhcmdldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbW92ZSA9IHRoaXMucG90ZW50aWFsVGFyZ2V0cy5wb3AoKTtcbiAgICAgICAgICAgIC8vIFNraXAgY2VsbHMgYWxyZWFkeSBhdHRhY2tlZFxuICAgICAgICAgICAgaWYgKHRoaXMuYXR0YWNrZWRDZWxscy5oYXMoYCR7bW92ZVswXX0sJHttb3ZlWzFdfWApKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGF0dGFjayB0aGUgY2VsbFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5vcHBvbmVudEJvYXJkLnJlY2VpdmVBdHRhY2sobW92ZVswXSwgbW92ZVsxXSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy8gU3VjY2Vzc2Z1bCBoaXRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHBvbmVudEJvYXJkLmdldFNoaXBBdChtb3ZlWzBdLCBtb3ZlWzFdKS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RIaXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvdGVudGlhbFRhcmdldHMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEhpdCA9IG1vdmU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQWRqYWNlbnRDZWxscyhtb3ZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbW92ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBubyB2YWxpZCBhZGphY2VudCB0YXJnZXRzIHJlbWFpbiwgcmVzZXQgYW5kIG1ha2UgYSByYW5kb20gbW92ZVxuICAgICAgICB0aGlzLmxhc3RIaXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5kb21Nb3ZlKCk7XG4gICAgfVxuICAgIHJhbmRvbU1vdmUoKSB7XG4gICAgICAgIGxldCBtb3ZlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBtb3ZlID0gW1xuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuR1JJRF9TSVpFKSxcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLkdSSURfU0laRSlcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0gd2hpbGUgKHRoaXMuYXR0YWNrZWRDZWxscy5oYXMoYCR7bW92ZVswXX0sJHttb3ZlWzFdfWApKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5vcHBvbmVudEJvYXJkLnJlY2VpdmVBdHRhY2sobW92ZVswXSwgbW92ZVsxXSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdEhpdCA9IG1vdmU7XG4gICAgICAgICAgICB0aGlzLmFkZEFkamFjZW50Q2VsbHMobW92ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vdmU7XG4gICAgfVxuICAgIGFkZEFkamFjZW50Q2VsbHMobW92ZSkge1xuICAgICAgICBjb25zdCBbY29sLCByb3ddID0gbW92ZTtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IFtcbiAgICAgICAgICAgIFtjb2wgLSAxLCByb3ddLCAvLyBMZWZ0XG4gICAgICAgICAgICBbY29sICsgMSwgcm93XSwgLy8gUmlnaHRcbiAgICAgICAgICAgIFtjb2wsIHJvdyAtIDFdLCAvLyBVcFxuICAgICAgICAgICAgW2NvbCwgcm93ICsgMV0gLy8gRG93blxuICAgICAgICBdO1xuICAgICAgICAvLyBBZGQgdmFsaWQgYW5kIHVudmlzaXRlZCBhZGphY2VudCBjZWxsc1xuICAgICAgICBkaXJlY3Rpb25zLmZvckVhY2goKFtuZXdDb2wsIG5ld1Jvd10pID0+IHtcbiAgICAgICAgICAgIGlmIChuZXdDb2wgPj0gMCAmJiBuZXdDb2wgPCB0aGlzLkdSSURfU0laRSAmJiAvLyBXaXRoaW4gYm91bmRzIGhvcml6b250YWxseVxuICAgICAgICAgICAgICAgIG5ld1JvdyA+PSAwICYmIG5ld1JvdyA8IHRoaXMuR1JJRF9TSVpFICYmIC8vIFdpdGhpbiBib3VuZHMgdmVydGljYWxseVxuICAgICAgICAgICAgICAgICF0aGlzLmF0dGFja2VkQ2VsbHMuaGFzKGAke25ld0NvbH0sJHtuZXdSb3d9YCkgLy8gTm90IGFscmVhZHkgYXR0YWNrZWRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMucG90ZW50aWFsVGFyZ2V0cy5wdXNoKFtuZXdDb2wsIG5ld1Jvd10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHYW1lYm9hcmQgfSBmcm9tIFwiLi9HYW1lYm9hcmRcIjtcbmltcG9ydCB7IFNoaXBQbGFjZW1lbnRXaW5kb3cgfSBmcm9tIFwiLi9TaGlwUGxhY2VtZW50V2luZG93XCI7XG5pbXBvcnQgeyBFbmVteUFpIH0gZnJvbSBcIi4vRW5lbXlBaVwiO1xuZXhwb3J0IGZ1bmN0aW9uIERvbSgpIHtcbiAgICBjb25zdCBHUklEX1NJWkUgPSAxMDtcbiAgICBsZXQgcGxheWVyQm9hcmQ7XG4gICAgbGV0IGVuZW15Qm9hcmQ7XG4gICAgbGV0IGFpUGxheWVyO1xuICAgIGxldCBpc1BsYXllclR1cm47XG4gICAgLy8gQ3JlYXRlIGEgZ3JpZCBmb3IgdGhlIGdhbWUgYm9hcmRcbiAgICBmdW5jdGlvbiBjcmVhdGVHcmlkKGNvbnRhaW5lcklkLCBnYW1lYm9hcmQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7Y29udGFpbmVySWR9LWJvYXJkYCk7XG4gICAgICAgIGlmICghY29udGFpbmVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7IC8vIENsZWFyIGV4aXN0aW5nIGNvbnRlbnRcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2JvYXJkJyk7XG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IEdSSURfU0laRTsgY29sKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEdSSURfU0laRTsgcm93KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdjZWxsJyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKGAke2NvbnRhaW5lcklkfS1jZWxsYCk7XG4gICAgICAgICAgICAgICAgY2VsbC5kYXRhc2V0LnJvdyA9IHJvdy50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGNlbGwuZGF0YXNldC5jb2wgPSBjb2wudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVySWQgPT09ICdlbmVteScpXG4gICAgICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBoYW5kbGVDZWxsQ2xpY2soY29sLCByb3csIGdhbWVib2FyZCwgY2VsbCkpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBIYW5kbGUgY2xpY2sgZXZlbnRzIG9uIHRoZSBlbmVteSBib2FyZFxuICAgIGZ1bmN0aW9uIGhhbmRsZUNlbGxDbGljayhjb2wsIHJvdywgZ2FtZWJvYXJkLCBjZWxsKSB7XG4gICAgICAgIGlmICghaXNQbGF5ZXJUdXJuIHx8IGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaXQnKSB8fCBjZWxsLmNsYXNzTGlzdC5jb250YWlucygnbWlzcycpKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIElnbm9yZSBjbGlja3Mgd2hlbiBpdCdzIG5vdCBwbGF5ZXIncyB0dXJuIG9yIG9uIGFscmVhZHkgYXR0YWNrZWQgY2VsbHNcbiAgICAgICAgfVxuICAgICAgICBpc1BsYXllclR1cm4gPSBmYWxzZTsgLy8gSW1tZWRpYXRlbHkgc2V0IHRvIGZhbHNlIHRvIHByZXZlbnQgbXVsdGlwbGUgY2xpY2tzXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgcm93KTtcbiAgICAgICAgdXBkYXRlQ2VsbEFwcGVhcmFuY2UoY2VsbCwgcmVzdWx0KTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcCA9IGdhbWVib2FyZC5nZXRTaGlwQXQoY29sLCByb3cpO1xuICAgICAgICAgICAgaWYgKHNoaXAgJiYgc2hpcC5pc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNoaXAuZ2V0TmFtZSgpICsgJyBpcyBzdW5rJyk7XG4gICAgICAgICAgICAgICAgdXBkYXRlR3JpZCgnZW5lbXknLCBnYW1lYm9hcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5hbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIEdhbWVGaW5hbGUoZ2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQbGF5ZXIgZ2V0cyBhbm90aGVyIHR1cm5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGxheWVyVHVybigpO1xuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoYWlUdXJuLCA1MDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBsYXllclR1cm4oKSB7XG4gICAgICAgIGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFpVHVybigpIHtcbiAgICAgICAgaWYgKGlzUGxheWVyVHVybilcbiAgICAgICAgICAgIHJldHVybjsgLy8gU2FmZWd1YXJkIGFnYWluc3QgdW5leHBlY3RlZCBjYWxsc1xuICAgICAgICBjb25zdCBbYWlDb2wsIGFpUm93XSA9IGFpUGxheWVyLm1ha2VNb3ZlKCk7XG4gICAgICAgIGNvbnN0IHBsYXllckNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucGxheWVyLWNlbGxbZGF0YS1jb2w9XCIke2FpQ29sfVwiXVtkYXRhLXJvdz1cIiR7YWlSb3d9XCJdYCk7XG4gICAgICAgIC8vIENoZWNrIGZvciBzaGlwIGFuZCBjYWxsIHJlY2VpdmVBdHRhY2sgQkVGT1JFIHVwZGF0aW5nIHRoZSBjZWxsIGFwcGVhcmFuY2VcbiAgICAgICAgY29uc3QgaGl0U2hpcCA9IHBsYXllckJvYXJkLmdldFNoaXBBdChhaUNvbCwgYWlSb3cpO1xuICAgICAgICBwbGF5ZXJCb2FyZC5yZWNlaXZlQXR0YWNrKGFpQ29sLCBhaVJvdyk7XG4gICAgICAgIGlmIChoaXRTaGlwKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgY2VsbCBhcHBlYXJhbmNlIGZvciBhIGhpdFxuICAgICAgICAgICAgcGxheWVyQ2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdtaXNzJyk7IC8vIFJlbW92ZSBtaXNzIGNsYXNzIGlmIGl0IHdhcyBhY2NpZGVudGFsbHkgYWRkZWRcbiAgICAgICAgICAgIHBsYXllckNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XG4gICAgICAgICAgICBwbGF5ZXJDZWxsLnRleHRDb250ZW50ID0gJ8OXJztcbiAgICAgICAgICAgIHVwZGF0ZUdyaWQoJ3BsYXllcicsIHBsYXllckJvYXJkKTtcbiAgICAgICAgICAgIGlmIChwbGF5ZXJCb2FyZC5hbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIEdhbWVGaW5hbGUocGxheWVyQm9hcmQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFJIGdldHMgYW5vdGhlciB0dXJuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGFpVHVybiwgNTAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjZWxsIGFwcGVhcmFuY2UgZm9yIGEgbWlzc1xuICAgICAgICAgICAgcGxheWVyQ2VsbC5jbGFzc0xpc3QuYWRkKCdtaXNzJyk7XG4gICAgICAgICAgICBwbGF5ZXJDZWxsLnRleHRDb250ZW50ID0gJ+KXiyc7XG4gICAgICAgICAgICB1cGRhdGVHcmlkKCdwbGF5ZXInLCBwbGF5ZXJCb2FyZCk7XG4gICAgICAgICAgICBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICAgICAgcGxheWVyVHVybigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vQWRkaW5nIG1pc3MgY2xhc3MgdG8gY2VsbCB0aGF0IG5lYXIgdGhlIHN1bmsgc2hpcFxuICAgIGZ1bmN0aW9uIHVwZGF0ZUdyaWQoY29udGFpbmVySWQsIGdhbWVib2FyZCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtjb250YWluZXJJZH0tYm9hcmRgKTtcbiAgICAgICAgaWYgKCFjb250YWluZXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNlbGxzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgICAgIC8vIEZpcnN0IHVwZGF0ZSBoaXRzXG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IEdSSURfU0laRTsgY29sKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEdSSURfU0laRTsgcm93KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwID0gZ2FtZWJvYXJkLmdldFNoaXBBdChjb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgaWYgKHNoaXApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjb2wgKiBHUklEX1NJWkUgKyByb3c7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBjZWxsc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLmNsYXNzTGlzdC5jb250YWlucygnaGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwudGV4dENvbnRlbnQgPSAnw5cnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRoZW4gdXBkYXRlIG1pc3Nlc1xuICAgICAgICBjb25zdCBtaXNzZWRDZWxscyA9IGdhbWVib2FyZC5nZXRBbGxNaXNzZWRDZWxscygpO1xuICAgICAgICBtaXNzZWRDZWxscy5mb3JFYWNoKChbY29sLCByb3ddKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNvbCAqIEdSSURfU0laRSArIHJvdztcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBjZWxsc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoIWNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaXQnKSkgeyAvLyBPbmx5IGFkZCBtaXNzIGlmIGl0J3Mgbm90IGFscmVhZHkgbWFya2VkIGFzIGhpdFxuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnbWlzcycpO1xuICAgICAgICAgICAgICAgIGNlbGwudGV4dENvbnRlbnQgPSAn4peLJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vRnVuY3Rpb24gdG8gdXBkYXRlIGNlbGwgYXBwZWFyYW5jZVxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNlbGxBcHBlYXJhbmNlKGNlbGwsIGlzSGl0KSB7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnaGl0JywgJ21pc3MnKTsgLy8gQ2xlYXIgZXhpc3RpbmcgY2xhc3NlcyBmaXJzdFxuICAgICAgICBpZiAoaXNIaXQpIHtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XG4gICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gJ8OXJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnbWlzcycpO1xuICAgICAgICAgICAgY2VsbC50ZXh0Q29udGVudCA9ICfil4snO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIG5ldyBnYW1lIGJvYXJkXG4gICAgZnVuY3Rpb24gY3JlYXRlTmV3R2FtZWJvYXJkKCkge1xuICAgICAgICBkZWxldGVQcmV2Qm9hcmRzKCk7XG4gICAgICAgIGNvbnN0IGdhbWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZ2FtZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdnYW1lLWNvbnRhaW5lcicpO1xuICAgICAgICBjb25zdCBwbGF5ZXJCb2FyZENvbnRhaW5lciA9IGNyZWF0ZUJvYXJkQ29udGFpbmVyKCdQbGF5ZXInKTtcbiAgICAgICAgY29uc3QgRW5lbXlCb2FyZENvbnRhaW5lciA9IGNyZWF0ZUJvYXJkQ29udGFpbmVyKCdFbmVteScpO1xuICAgICAgICBnYW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHBsYXllckJvYXJkQ29udGFpbmVyKTtcbiAgICAgICAgZ2FtZUNvbnRhaW5lci5hcHBlbmRDaGlsZChFbmVteUJvYXJkQ29udGFpbmVyKTtcbiAgICAgICAgY29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgbWFpbkNvbnRlbnQuYXBwZW5kQ2hpbGQoZ2FtZUNvbnRhaW5lcik7XG4gICAgICAgIHBsYXllckJvYXJkID0gbmV3IEdhbWVib2FyZCgncGxheWVyJyk7XG4gICAgICAgIGVuZW15Qm9hcmQgPSBuZXcgR2FtZWJvYXJkKCdlbmVteScpO1xuICAgICAgICAvLyBDcmVhdGUgdGhlIHBsYXllcidzIGJvYXJkIGZpcnN0XG4gICAgICAgIGNyZWF0ZUdyaWQoJ3BsYXllcicsIHBsYXllckJvYXJkKTtcbiAgICAgICAgLy8gUGxhY2UgZW5lbXkgc2hpcHMgcmFuZG9tbHlcbiAgICAgICAgZW5lbXlCb2FyZC5wbGFjZVNoaXBzUmFuZG9tbHkoKTtcbiAgICAgICAgLy8gT3BlbiB0aGUgc2hpcCBwbGFjZW1lbnQgd2luZG93IHdpdGggcHJvcGVybHkgdHlwZWQgY2FsbGJhY2tcbiAgICAgICAgU2hpcFBsYWNlbWVudFdpbmRvdyhwbGF5ZXJCb2FyZCwgKHVwZGF0ZWRQbGF5ZXJCb2FyZCkgPT4ge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBlbmVteSBib2FyZCBhZnRlciBzaGlwIHBsYWNlbWVudCBpcyBjb21wbGV0ZVxuICAgICAgICAgICAgY3JlYXRlR3JpZCgnZW5lbXknLCBlbmVteUJvYXJkKTtcbiAgICAgICAgICAgIHBsYXllckJvYXJkID0gdXBkYXRlZFBsYXllckJvYXJkOyAvLyBVcGRhdGUgdGhlIHBsYXllckJvYXJkIHdpdGggdGhlIG5ldyBib2FyZFxuICAgICAgICAgICAgYWlQbGF5ZXIgPSBuZXcgRW5lbXlBaShwbGF5ZXJCb2FyZCk7XG4gICAgICAgICAgICBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgY29udGFpbmVyIGZvciBhIGdhbWUgYm9hcmRcbiAgICBmdW5jdGlvbiBjcmVhdGVCb2FyZENvbnRhaW5lcih0aXRsZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2JvYXJkLWNvbnRhaW5lcicpO1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICBoZWFkZXIudGV4dENvbnRlbnQgPSBgJHt0aXRsZX0gYm9hcmRgO1xuICAgICAgICBjb25zdCBib2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBib2FyZC5pZCA9IGAke3RpdGxlLnRvTG93ZXJDYXNlKCl9LWJvYXJkYDtcbiAgICAgICAgYm9hcmQuY2xhc3NMaXN0LmFkZCgnYm9hcmQnKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRlcik7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChib2FyZCk7XG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbnkgZXhpc3RpbmcgZ2FtZSBib2FyZHNcbiAgICBmdW5jdGlvbiBkZWxldGVQcmV2Qm9hcmRzKCkge1xuICAgICAgICBsZXQgZ2FtZUNvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FtZS1jb250YWluZXInKTtcbiAgICAgICAgY29uc3QgZmluYWxlUmVzdWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbmFsZS1yZXN1bHQnKTtcbiAgICAgICAgZmluYWxlUmVzdWx0LnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgIGdhbWVDb250YWluZXJzLmZvckVhY2goY29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIGdhbWVcbiAgICBmdW5jdGlvbiBzdGFydFVwKCkge1xuICAgICAgICBjcmVhdGVOZXdHYW1lYm9hcmQoKTtcbiAgICAgICAgY29uc3QgbmV3R2FtZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXctZ2FtZS1idG4nKTtcbiAgICAgICAgaWYgKG5ld0dhbWVCdG4pIHtcbiAgICAgICAgICAgIG5ld0dhbWVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjcmVhdGVOZXdHYW1lYm9hcmQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk5ldyBnYW1lIGJ1dHRvbiBub3QgZm91bmRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9GaW5pc2ggdGhlIGdhbWVcbiAgICBmdW5jdGlvbiBHYW1lRmluYWxlKGdhbWVib2FyZCkge1xuICAgICAgICBjb25zdCBnYW1lQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWUtY29udGFpbmVyJyk7XG4gICAgICAgIGNvbnN0IGZpbmFsZVJlc3VsdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaW5hbGUtcmVzdWx0Jyk7XG4gICAgICAgIGNvbnN0IHdpbm5lciA9IGdhbWVib2FyZC5nZXROYW1lKCkgPT09ICdwbGF5ZXInID8gJ0FJJyA6ICdQbGF5ZXInO1xuICAgICAgICBmaW5hbGVSZXN1bHQudGV4dENvbnRlbnQgPSBgJHt3aW5uZXJ9IFdpbnNgO1xuICAgICAgICBhbGVydChgJHt3aW5uZXJ9IHdpbnMhYCk7XG4gICAgICAgIGdhbWVDb250YWluZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnRVcFxuICAgIH07XG59XG4iLCJpbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xuaW1wb3J0IHsgR2FtZWJvYXJkIH0gZnJvbSBcIi4vR2FtZWJvYXJkXCI7XG5leHBvcnQgZnVuY3Rpb24gU2hpcFBsYWNlbWVudFdpbmRvdyhwbGF5ZXJCb2FyZCwgb25GaW5pc2gpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi13aW5kb3cnKS5jbGFzc0xpc3QuYWRkKCdub24taW50ZXJhY3RpdmUnKTtcbiAgICBjb25zdCBHUklEX1NJWkUgPSAxMDtcbiAgICBjb25zdCBzaGlwcyA9IFtcbiAgICAgICAgeyBuYW1lOiAnQ2FycmllcicsIGxlbmd0aDogNSB9LFxuICAgICAgICB7IG5hbWU6ICdCYXR0bGVzaGlwJywgbGVuZ3RoOiA0IH0sXG4gICAgICAgIHsgbmFtZTogJ0NydWlzZXInLCBsZW5ndGg6IDMgfSxcbiAgICAgICAgeyBuYW1lOiAnU3VibWFyaW5lJywgbGVuZ3RoOiAzIH0sXG4gICAgICAgIHsgbmFtZTogJ0Rlc3Ryb3llcicsIGxlbmd0aDogMiB9XG4gICAgXTtcbiAgICBsZXQgY3VycmVudFNoaXBJbmRleCA9IDA7XG4gICAgbGV0IGN1cnJlbnRPcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgLy8gQ3JlYXRlIHRoZSBzaGlwIHBsYWNlbWVudCB3aW5kb3dcbiAgICBmdW5jdGlvbiBjcmVhdGVQbGFjZW1lbnRXaW5kb3coKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlbWVudFdpbmRvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBwbGFjZW1lbnRXaW5kb3cuY2xhc3NMaXN0LmFkZCgncGxhY2VtZW50LXdpbmRvdycpO1xuICAgICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gJ1BsYWNlIFlvdXIgU2hpcHMnO1xuICAgICAgICBwbGFjZW1lbnRXaW5kb3cuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgICAgICBjb25zdCBncmlkID0gY3JlYXRlUGxhY2VtZW50R3JpZCgpO1xuICAgICAgICBwbGFjZW1lbnRXaW5kb3cuYXBwZW5kQ2hpbGQoZ3JpZCk7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xzID0gY3JlYXRlQ29udHJvbHMoKTtcbiAgICAgICAgcGxhY2VtZW50V2luZG93LmFwcGVuZENoaWxkKGNvbnRyb2xzKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUocGxhY2VtZW50V2luZG93LCBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgdGhlIGdyaWQgZm9yIHNoaXAgcGxhY2VtZW50XG4gICAgZnVuY3Rpb24gY3JlYXRlUGxhY2VtZW50R3JpZCgpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoJ2JvYXJkJyk7XG4gICAgICAgIGdyaWQuY2xhc3NMaXN0LmFkZCgncGxhY2VtZW50LWJvYXJkJyk7XG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IEdSSURfU0laRTsgY29sKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEdSSURfU0laRTsgcm93KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdwbGFjZW1lbnQtY2VsbCcpO1xuICAgICAgICAgICAgICAgIGNlbGwuZGF0YXNldC5yb3cgPSByb3cudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjZWxsLmRhdGFzZXQuY29sID0gY29sLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHBsYWNlU2hpcChjb2wsIHJvdykpO1xuICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKCkgPT4gcHJldmlld1NoaXAoY29sLCByb3cpKTtcbiAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgY2xlYXJQcmV2aWV3KTtcbiAgICAgICAgICAgICAgICBncmlkLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBncmlkO1xuICAgIH1cbiAgICAvL1Jlc3RhcnQgcGxhY2VtZW50IGJvXG4gICAgZnVuY3Rpb24gcmVzdGFydCgpIHtcbiAgICAgICAgY3VycmVudFNoaXBJbmRleCA9IDA7XG4gICAgICAgIHBsYXllckJvYXJkID0gbmV3IEdhbWVib2FyZCgncGxheWVyJyk7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBsYWNlbWVudC1jZWxsJyk7XG4gICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2hpcC1wbGFjZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBjb250cm9sIGVsZW1lbnRzIChyb3RhdGUgYnV0dG9uIGFuZCBzaGlwIGluZm8pXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29udHJvbHMoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xzLmNsYXNzTGlzdC5hZGQoJ3BsYWNlbWVudC1jb250cm9scycpO1xuICAgICAgICBjb25zdCByb3RhdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgcm90YXRlQnV0dG9uLnRleHRDb250ZW50ID0gJ1JvdGF0ZSBTaGlwJztcbiAgICAgICAgcm90YXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcm90YXRlU2hpcCk7XG4gICAgICAgIGNvbnRyb2xzLmFwcGVuZENoaWxkKHJvdGF0ZUJ1dHRvbik7XG4gICAgICAgIGNvbnN0IFJhbmRvbUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBSYW5kb21CdG4udGV4dENvbnRlbnQgPSAnUmFuZG9taXplJztcbiAgICAgICAgUmFuZG9tQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmFuZG9taXplKTtcbiAgICAgICAgY29udHJvbHMuYXBwZW5kQ2hpbGQoUmFuZG9tQnRuKTtcbiAgICAgICAgY29uc3QgcmVzdGFydEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICByZXN0YXJ0QnV0dG9uLnRleHRDb250ZW50ID0gJ1Jlc3RhcnQnO1xuICAgICAgICByZXN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVzdGFydCk7XG4gICAgICAgIGNvbnRyb2xzLmFwcGVuZENoaWxkKHJlc3RhcnRCdXR0b24pO1xuICAgICAgICByZXR1cm4gY29udHJvbHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmRvbWl6ZSgpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJvYXJkIGluc3RhbmNlIHRvIGVuc3VyZSBjbGVhbiBzdGF0ZVxuICAgICAgICBwbGF5ZXJCb2FyZCA9IG5ldyBHYW1lYm9hcmQoJ3BsYXllcicpO1xuICAgICAgICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXBzUmFuZG9tbHkoKTtcbiAgICAgICAgLy8gVXBkYXRlIHZpc3VhbCBzdGF0ZSBieSBtYXJraW5nIGFsbCBzaGlwIHBvc2l0aW9uc1xuICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGFjZW1lbnQtY2VsbCcpO1xuICAgICAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4gY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdzaGlwLXBsYWNlZCcpKTtcbiAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgR1JJRF9TSVpFOyBjb2wrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgR1JJRF9TSVpFOyByb3crKykge1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJCb2FyZC5nZXRTaGlwQXQoY29sLCByb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY29sICogR1JJRF9TSVpFICsgcm93O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY2VsbHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ3NoaXAtcGxhY2VkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmlzaFBsYWNlbWVudCgpO1xuICAgIH1cbiAgICAvLyBSb3RhdGUgdGhlIGN1cnJlbnQgc2hpcCBvcmllbnRhdGlvblxuICAgIGZ1bmN0aW9uIHJvdGF0ZVNoaXAoKSB7XG4gICAgICAgIGN1cnJlbnRPcmllbnRhdGlvbiA9IGN1cnJlbnRPcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgLy8gUGxhY2UgYSBzaGlwIG9uIHRoZSBib2FyZFxuICAgIGZ1bmN0aW9uIHBsYWNlU2hpcChjb2wsIHJvdykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2hpcCA9IHNoaXBzW2N1cnJlbnRTaGlwSW5kZXhdO1xuICAgICAgICBjb25zdCBzaGlwID0gbmV3IFNoaXAoY3VycmVudFNoaXAubmFtZSwgY3VycmVudFNoaXAubGVuZ3RoLCBjdXJyZW50T3JpZW50YXRpb24pO1xuICAgICAgICBpZiAocGxheWVyQm9hcmQucGxhY2VTaGlwKHNoaXAsIGNvbCwgcm93KSkge1xuICAgICAgICAgICAgdXBkYXRlR3JpZChjb2wsIHJvdyk7XG4gICAgICAgICAgICBjdXJyZW50U2hpcEluZGV4Kys7XG4gICAgICAgICAgICBpZiAoY3VycmVudFNoaXBJbmRleCA+PSBzaGlwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmaW5pc2hQbGFjZW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBVcGRhdGUgdGhlIGdyaWQgYWZ0ZXIgcGxhY2luZyBhIHNoaXBcbiAgICBmdW5jdGlvbiB1cGRhdGVHcmlkKGNvbCwgcm93KSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTaGlwID0gc2hpcHNbY3VycmVudFNoaXBJbmRleF07XG4gICAgICAgIGNvbnN0IGNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBsYWNlbWVudC1jZWxsJyk7XG4gICAgICAgIGlmIChjdXJyZW50T3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJylcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBjb2wgKiBHUklEX1NJWkUgKyAocm93ICsgaSk7XG4gICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3NoaXAtcGxhY2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50T3JpZW50YXRpb24gPT0gJ2hvcml6b250YWwnKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IChjb2wgKyBpKSAqIEdSSURfU0laRSArIHJvdztcbiAgICAgICAgICAgICAgICBjZWxsc1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnc2hpcC1wbGFjZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJldmlldyBzaGlwIHBsYWNlbWVudCBvbiBob3ZlclxuICAgIGZ1bmN0aW9uIHByZXZpZXdTaGlwKGNvbCwgcm93KSB7XG4gICAgICAgIGNsZWFyUHJldmlldygpO1xuICAgICAgICBjb25zdCBjdXJyZW50U2hpcCA9IHNoaXBzW2N1cnJlbnRTaGlwSW5kZXhdO1xuICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGFjZW1lbnQtY2VsbCcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aWV3Um93ID0gY3VycmVudE9yaWVudGF0aW9uID09PSAndmVydGljYWwnID8gcm93ICsgaSA6IHJvdztcbiAgICAgICAgICAgIGNvbnN0IHByZXZpZXdDb2wgPSBjdXJyZW50T3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyA/IGNvbCArIGkgOiBjb2w7XG4gICAgICAgICAgICBpZiAocHJldmlld1JvdyA8IEdSSURfU0laRSAmJiBwcmV2aWV3Q29sIDwgR1JJRF9TSVpFKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBwcmV2aWV3Q29sICogR1JJRF9TSVpFICsgcHJldmlld1JvdztcbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZFBsYWNlbWVudChyb3csIGNvbCwgY3VycmVudFNoaXAubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsc1tpbmRleF0uY2xhc3NMaXN0LmFkZCgncHJldmlldycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQtcHJldmlldycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCBwbGFjZW1lbnQgaXMgdmFsaWRcbiAgICBmdW5jdGlvbiBpc1ZhbGlkUGxhY2VtZW50KHJvdywgY29sLCBzaGlwTGVuZ3RoKSB7XG4gICAgICAgIGlmIChjdXJyZW50T3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbCArIHNoaXBMZW5ndGggPD0gR1JJRF9TSVpFO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJvdyArIHNoaXBMZW5ndGggPD0gR1JJRF9TSVpFO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENsZWFyIHRoZSBzaGlwIHBsYWNlbWVudCBwcmV2aWV3XG4gICAgZnVuY3Rpb24gY2xlYXJQcmV2aWV3KCkge1xuICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGFjZW1lbnQtY2VsbCcpO1xuICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ3ByZXZpZXcnKTtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxpZC1wcmV2aWV3Jyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVQbGF5ZXJCb2FyZCgpIHtcbiAgICAgICAgY29uc3QgcGxheWVyQm9hcmRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllci1ib2FyZCcpO1xuICAgICAgICBpZiAoIXBsYXllckJvYXJkRWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgY2VsbHMgPSBwbGF5ZXJCb2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcbiAgICAgICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2hpcCcpKTtcbiAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgR1JJRF9TSVpFOyBjb2wrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgR1JJRF9TSVpFOyByb3crKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBwbGF5ZXJCb2FyZC5nZXRTaGlwQXQoY29sLCByb3cpO1xuICAgICAgICAgICAgICAgIGlmIChzaGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY29sICogR1JJRF9TSVpFICsgcm93O1xuICAgICAgICAgICAgICAgICAgICBjZWxsc1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnc2hpcCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBGaW5pc2ggdGhlIHNoaXAgcGxhY2VtZW50IHBoYXNlXG4gICAgZnVuY3Rpb24gZmluaXNoUGxhY2VtZW50KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHBsYWNlbWVudFdpbmRvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZW1lbnQtd2luZG93Jyk7XG4gICAgICAgIGlmIChwbGFjZW1lbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIHBsYWNlbWVudFdpbmRvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi13aW5kb3cnKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5yZW1vdmUoJ25vbi1pbnRlcmFjdGl2ZScpO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIHBsYXllcidzIGJvYXJkIHdpdGggcGxhY2VkIHNoaXBzXG4gICAgICAgIHVwZGF0ZVBsYXllckJvYXJkKCk7XG4gICAgICAgIC8vIFBhc3MgdGhlIHBsYXllckJvYXJkIHRvIHRoZSBjYWxsYmFja1xuICAgICAgICBvbkZpbmlzaChwbGF5ZXJCb2FyZCk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIHNoaXAgcGxhY2VtZW50IHdpbmRvd1xuICAgIGNyZWF0ZVBsYWNlbWVudFdpbmRvdygpO1xufVxuIiwiLy8gSW1wb3J0IG5lY2Vzc2FyeSBmaWxlcyBhbmQgc3R5bGVzXG5pbXBvcnQgJy4vaW5kZXguaHRtbCc7XG5pbXBvcnQgJy4vc3R5bGUvc3R5bGUuY3NzJztcbmltcG9ydCB7IERvbSB9IGZyb20gJy4vc2NyaXB0cy9Eb20nO1xuLy8gTWFpbiBmdW5jdGlvbiB0byBzdGFydCB0aGUgYXBwbGljYXRpb25cbmZ1bmN0aW9uIG1haW4oKSB7XG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgRE9NIGFuZCBzdGFydCB0aGUgZ2FtZVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbSA9IERvbSgpO1xuICAgICAgICBkb20uc3RhcnRVcCgpO1xuICAgIH0pO1xufVxuLy8gUnVuIHRoZSBtYWluIGZ1bmN0aW9uIHdoZW4gdGhlIHNjcmlwdCBsb2Fkc1xubWFpbigpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsIlNoaXAiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJvcmllbnRhdGlvbiIsInNoaXBMZW5ndGgiLCJoaXRQb3NpdGlvbnMiLCJTZXQiLCJnZXRMZW5ndGgiLCJnZXROYW1lIiwiZ2V0TnVtYmVyT2ZIaXRzIiwic2l6ZSIsImlzU3VuayIsImdldEhpdCIsInBvc2l0aW9uIiwiYWRkIiwiaXNWZXJ0aWNhbCIsIkdhbWVib2FyZCIsInNoaXBzIiwiR1JJRF9TSVpFIiwiYm9hcmQiLCJtaXNzZWRTaG90cyIsImluaXRpYWxpemUiLCJqIiwicGxhY2VTaGlwIiwic2hpcCIsImNvbHVtbiIsInJvdyIsInBsYWNlcyIsImlzQ2VsbEF2YWlsYWJsZSIsImlzV2l0aGluQm91bmRzIiwiY2hlY2tDb2wiLCJjaGVja1JvdyIsImdldFNoaXBBdCIsInJlY2VpdmVBdHRhY2siLCJjb25zb2xlIiwibG9nIiwic2hpcEluZm8iLCJmaW5kIiwicyIsImFsbFBvc2l0aW9uc0hpdCIsImV2ZXJ5IiwiY29sIiwiaGFzIiwibWFya0FkamFjZW50Q2VsbHMiLCJkaXJlY3Rpb25zIiwiZm9yRWFjaCIsInBsYWNlIiwiZHgiLCJkeSIsImFkakNvbCIsImFkalJvdyIsImdldEFsbE1pc3NlZENlbGxzIiwibWlzc2VkQ2VsbHMiLCJnZXRNaXNzZWRTaG90cyIsImFsbFNoaXBzU3VuayIsInBsYWNlU2hpcHNSYW5kb21seSIsInBsYWNlZCIsImF0dGVtcHRzIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZXJyb3IiLCJnZXRCb2FyZCIsIkVuZW15QWkiLCJvcHBvbmVudEJvYXJkIiwibGFzdEhpdCIsInBvdGVudGlhbFRhcmdldHMiLCJhdHRhY2tlZENlbGxzIiwibWFrZU1vdmUiLCJtb3ZlIiwidGFyZ2V0QWRqYWNlbnRDZWxscyIsInJhbmRvbU1vdmUiLCJwb3AiLCJhZGRBZGphY2VudENlbGxzIiwibmV3Q29sIiwibmV3Um93IiwiRG9tIiwicGxheWVyQm9hcmQiLCJlbmVteUJvYXJkIiwiYWlQbGF5ZXIiLCJpc1BsYXllclR1cm4iLCJjcmVhdGVHcmlkIiwiY29udGFpbmVySWQiLCJnYW1lYm9hcmQiLCJjb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsImNsYXNzTGlzdCIsImNlbGwiLCJkYXRhc2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUNlbGxDbGljayIsImNvbnRhaW5zIiwiaXNIaXQiLCJ0ZXh0Q29udGVudCIsInVwZGF0ZUNlbGxBcHBlYXJhbmNlIiwidXBkYXRlR3JpZCIsIkdhbWVGaW5hbGUiLCJzZXRUaW1lb3V0IiwicGxheWVyVHVybiIsImFpVHVybiIsImFpQ29sIiwiYWlSb3ciLCJwbGF5ZXJDZWxsIiwiaGl0U2hpcCIsImNlbGxzIiwicXVlcnlTZWxlY3RvckFsbCIsImNyZWF0ZU5ld0dhbWVib2FyZCIsImdhbWVDb250YWluZXJzIiwiZGVsZXRlUHJldkJvYXJkcyIsImdhbWVDb250YWluZXIiLCJwbGF5ZXJCb2FyZENvbnRhaW5lciIsImNyZWF0ZUJvYXJkQ29udGFpbmVyIiwiRW5lbXlCb2FyZENvbnRhaW5lciIsImJvZHkiLCJvbkZpbmlzaCIsImN1cnJlbnRTaGlwSW5kZXgiLCJjdXJyZW50T3JpZW50YXRpb24iLCJyZXN0YXJ0IiwicmFuZG9taXplIiwiZmluaXNoUGxhY2VtZW50Iiwicm90YXRlU2hpcCIsImN1cnJlbnRTaGlwIiwicHJldmlld1NoaXAiLCJjbGVhclByZXZpZXciLCJwcmV2aWV3Um93IiwicHJldmlld0NvbCIsImlzVmFsaWRQbGFjZW1lbnQiLCJfYSIsInBsYWNlbWVudFdpbmRvdyIsInBsYXllckJvYXJkRWxlbWVudCIsInVwZGF0ZVBsYXllckJvYXJkIiwidGl0bGUiLCJncmlkIiwiY3JlYXRlUGxhY2VtZW50R3JpZCIsImNvbnRyb2xzIiwicm90YXRlQnV0dG9uIiwiUmFuZG9tQnRuIiwicmVzdGFydEJ1dHRvbiIsImNyZWF0ZUNvbnRyb2xzIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlUGxhY2VtZW50V2luZG93IiwiU2hpcFBsYWNlbWVudFdpbmRvdyIsInVwZGF0ZWRQbGF5ZXJCb2FyZCIsImhlYWRlciIsInRvTG93ZXJDYXNlIiwiZmluYWxlUmVzdWx0Iiwid2lubmVyIiwiYWxlcnQiLCJwb2ludGVyRXZlbnRzIiwic3RhcnRVcCIsIm5ld0dhbWVCdG4iXSwic291cmNlUm9vdCI6IiJ9