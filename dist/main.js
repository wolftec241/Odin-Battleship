(()=>{"use strict";var n={106:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([n.id,"*{\n    --water-blue: #3ea4f0;\n    --water-blue-hover:#0a6bbf;\n    --ship-color: #444444;\n    --hit-color: #ff6b6b;\n    --miss-color: #c5c5c5;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f0f0f0;\n}\n\n.main-window{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\nheader{\n    width: 100vw;\n    min-width: 350px;\n    text-align: center;\n    border-bottom: grey solid 2px;\n    align-self: center;\n}\n\n.title{\n    font-size: 2rem;\n    margin: 0;\n    padding: 1rem;\n    background-color: var(--water-blue);\n}\n\n#app{\n    display: flex;\n    flex-direction: column;\n}\n\n#new-game-btn{\n    font-size: 1.5rem;\n    font-weight: bold;\n    text-align: center;\n    margin-top: 1rem;\n    padding: 0.3rem;\n    background-color: var(--water-blue);\n    width: 8rem;\n    align-self: center;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#new-game-btn:hover{\n    background-color: var(--water-blue-hover);\n}\n\n.game-container {\n    display: flex;\n    gap: 3rem;\n    width: 80vw;\n    justify-content: center;\n    flex-flow: row wrap;\n    margin-bottom: 2rem;\n}\n\n.board-container {\n    text-align: center;\n}\n\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    border: 1px solid ;\n    width: 350px;\n    height: 350px;\n}\n\n.cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 24px;\n    font-weight: bold;\n}\n\n#enemy-board > .cell:hover{\n    background-color: var(--water-blue-hover);\n    cursor: pointer;\n}\n\n.ship {\n    background-color: var(--ship-color);\n}\n\n.hit {\n    background-color: var(--hit-color);\n    color: #ffffff;\n    cursor: default;\n    pointer-events: none;\n}\n\n.miss {\n    background-color: var(--miss-color);\n    color: #000000;\n    cursor: default;\n    pointer-events: none;\n}\n\n#finale-result{\n    font-size: 3rem;\n    font-weight: bold;\n    text-align: center;\n    background-color: var(--water-blue);\n    align-self: center;\n    width: 20rem;\n    border-radius: 5px;\n}\n\n/* Ship Placement window */\n.placement-window {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.3);\n    z-index: 1000;\n}\n\n.placement-cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    cursor: pointer;\n}\n\n.placement-cell.preview {\n    background-color: rgba(0, 255, 0, 0.3);\n}\n\n.placement-cell.invalid-preview {\n    background-color: rgb(255, 0, 0);\n}\n\n.placement-cell.ship-placed {\n    background-color: var(--ship-color);\n}\n\n.placement-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.non-interactive {\n    pointer-events: none;\n    filter: blur(10px);\n}","",{version:3,sources:["webpack://./src/style/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,0BAA0B;IAC1B,qBAAqB;IACrB,oBAAoB;IACpB,qBAAqB;AACzB;;AAEA;IACI,8BAA8B;IAC9B,SAAS;IACT,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,SAAS;IACT,aAAa;IACb,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,mCAAmC;IACnC,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,SAAS;IACT,WAAW;IACX,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,kBAAkB;IAClB,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,mCAAmC;IACnC,uBAAuB;IACvB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,yCAAyC;IACzC,eAAe;AACnB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,kCAAkC;IAClC,cAAc;IACd,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,mCAAmC;IACnC,cAAc;IACd,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,mCAAmC;IACnC,kBAAkB;IAClB,YAAY;IACZ,kBAAkB;AACtB;;AAEA,0BAA0B;AAC1B;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,oCAAoC;IACpC,aAAa;AACjB;;AAEA;IACI,mCAAmC;IACnC,uBAAuB;IACvB,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;AACtB",sourcesContent:["*{\n    --water-blue: #3ea4f0;\n    --water-blue-hover:#0a6bbf;\n    --ship-color: #444444;\n    --hit-color: #ff6b6b;\n    --miss-color: #c5c5c5;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f0f0f0;\n}\n\n.main-window{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\nheader{\n    width: 100vw;\n    min-width: 350px;\n    text-align: center;\n    border-bottom: grey solid 2px;\n    align-self: center;\n}\n\n.title{\n    font-size: 2rem;\n    margin: 0;\n    padding: 1rem;\n    background-color: var(--water-blue);\n}\n\n#app{\n    display: flex;\n    flex-direction: column;\n}\n\n#new-game-btn{\n    font-size: 1.5rem;\n    font-weight: bold;\n    text-align: center;\n    margin-top: 1rem;\n    padding: 0.3rem;\n    background-color: var(--water-blue);\n    width: 8rem;\n    align-self: center;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#new-game-btn:hover{\n    background-color: var(--water-blue-hover);\n}\n\n.game-container {\n    display: flex;\n    gap: 3rem;\n    width: 80vw;\n    justify-content: center;\n    flex-flow: row wrap;\n    margin-bottom: 2rem;\n}\n\n.board-container {\n    text-align: center;\n}\n\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    border: 1px solid ;\n    width: 350px;\n    height: 350px;\n}\n\n.cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 24px;\n    font-weight: bold;\n}\n\n#enemy-board > .cell:hover{\n    background-color: var(--water-blue-hover);\n    cursor: pointer;\n}\n\n.ship {\n    background-color: var(--ship-color);\n}\n\n.hit {\n    background-color: var(--hit-color);\n    color: #ffffff;\n    cursor: default;\n    pointer-events: none;\n}\n\n.miss {\n    background-color: var(--miss-color);\n    color: #000000;\n    cursor: default;\n    pointer-events: none;\n}\n\n#finale-result{\n    font-size: 3rem;\n    font-weight: bold;\n    text-align: center;\n    background-color: var(--water-blue);\n    align-self: center;\n    width: 20rem;\n    border-radius: 5px;\n}\n\n/* Ship Placement window */\n.placement-window {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.3);\n    z-index: 1000;\n}\n\n.placement-cell {\n    background-color: var(--water-blue);\n    border: 1px solid black;\n    aspect-ratio: 1;\n    cursor: pointer;\n}\n\n.placement-cell.preview {\n    background-color: rgba(0, 255, 0, 0.3);\n}\n\n.placement-cell.invalid-preview {\n    background-color: rgb(255, 0, 0);\n}\n\n.placement-cell.ship-placed {\n    background-color: var(--ship-color);\n}\n\n.placement-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.non-interactive {\n    pointer-events: none;\n    filter: blur(10px);\n}"],sourceRoot:""}]);const s=a},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);r&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],A=i[c]||0,d="".concat(c," ").concat(A);i[c]=A+1;var u=t(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var h=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var l=r(n,o),c=0;c<i.length;c++){var A=t(i[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=l}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var r=t(72),o=t.n(r),i=t(825),a=t.n(i),s=t(659),l=t.n(s),c=t(56),A=t.n(c),d=t(540),u=t.n(d),p=t(113),h=t.n(p),m=t(106),f={};f.styleTagTransform=h(),f.setAttributes=A(),f.insert=l().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),o()(m.A,f),m.A&&m.A.locals&&m.A.locals;class C{constructor(n,e,t){this.name=n,this.shipLength=e,this.numberOfHits=0,this.sunk=!1,this.orientation=t}getLength(){return this.shipLength}getName(){return this.name}getNumberOfHits(){return this.numberOfHits}isSunk(){return this.sunk}getHit(){this.numberOfHits++,this.numberOfHits>=this.shipLength&&(this.sunk=!0)}isVertical(){return"vertical"===this.orientation}}class g{constructor(n){this.ships=[],this.GRID_SIZE=10,this.numberOfShips=0,this.name=n,this.board=[],this.missedShots=[],this.initialize()}initialize(){for(let n=0;n<this.GRID_SIZE;n++){this.board[n]=[],this.missedShots[n]=[];for(let e=0;e<this.GRID_SIZE;e++)this.board[n][e]=null,this.missedShots[n][e]=null}}getName(){return this.name}placeShip(n,e,t){let r=[];if(!0===n.isVertical()){if(t+n.getLength()>this.GRID_SIZE||e<0||t<0)return!1;for(let r=0;r<n.getLength();r++)if(!this.isCellAvailable(e,t+r))return!1;for(let o=0;o<n.getLength();o++)this.board[e][t+o]=n,r.push([e,t+o])}else if(!1===n.isVertical()){if(e+n.getLength()>this.GRID_SIZE||e<0||t<0)return!1;for(let r=0;r<n.getLength();r++)if(!this.isCellAvailable(e+r,t))return!1;for(let o=0;o<n.getLength();o++)this.board[e+o][t]=n,r.push([e+o,t])}return this.ships.push({ship:n,places:r}),this.numberOfShips++,!0}isWithinBounds(n,e){return n>=0&&n<this.GRID_SIZE&&e>=0&&e<this.GRID_SIZE}isCellAvailable(n,e){if(null!==this.board[n][e])return!1;for(let t=-1;t<=1;t++)for(let r=-1;r<=1;r++){const o=n+t,i=e+r;if(this.isWithinBounds(o,i)&&null!==this.board[o][i])return!1}return!0}getShipAt(n,e){return this.board[n][e]}receiveAttack(n,e){let t=this.getShipAt(n,e);return console.log(this.numberOfShips),null===t?(this.missedShots[n][e]=!0,!1):(t.getHit(),t.isSunk()&&(this.numberOfShips--,this.markAdjacentCells(t)),!0)}markAdjacentCells(n){const e=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];this.ships.forEach((t=>{t.ship===n&&t.places.forEach((t=>{e.forEach((([e,r])=>{const o=t[0]+e,i=t[1]+r;this.isWithinBounds(o,i)&&this.getShipAt(o,i)!==n&&(this.missedShots[o][i]=!0)}))}))}))}getAllMissedCells(){let n=[];for(let e=0;e<this.GRID_SIZE;e++)for(let t=0;t<this.GRID_SIZE;t++)this.missedShots[e][t]&&n.push([e,t]);return n}getMissedShots(){return this.missedShots}allShipsSunk(){return this.numberOfShips<=0}placeShipsRandomly(){[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}].forEach((n=>{let e=!1;for(;!e;){const t=Math.floor(Math.random()*this.GRID_SIZE),r=Math.floor(Math.random()*this.GRID_SIZE),o=Math.random()<.5?"horizontal":"vertical",i=new C(n.name,n.length,o);this.placeShip(i,t,r)&&(e=!0)}}))}}class b{constructor(n){this.opponentBoard=n,this.GRID_SIZE=10,this.lastHit=null,this.potentialTargets=[],this.attackedCells=new Set}makeMove(){let n;return n=this.lastHit&&this.potentialTargets.length>0?this.targetAdjacentCells():this.randomMove(),this.attackedCells.add(`${n[0]},${n[1]}`),n}targetAdjacentCells(){for(;this.potentialTargets.length>0;){const n=this.potentialTargets.pop();if(!this.attackedCells.has(`${n[0]},${n[1]}`))return this.opponentBoard.receiveAttack(n[0],n[1])&&(this.lastHit=n,this.addAdjacentCells(n)),n}return this.lastHit=null,this.randomMove()}randomMove(){let n;do{n=[Math.floor(Math.random()*this.GRID_SIZE),Math.floor(Math.random()*this.GRID_SIZE)]}while(this.attackedCells.has(`${n[0]},${n[1]}`));return this.opponentBoard.receiveAttack(n[0],n[1])&&(this.lastHit=n,this.addAdjacentCells(n)),n}addAdjacentCells(n){const[e,t]=n,r=[[e-1,t],[e+1,t],[e,t-1],[e,t+1]];this.potentialTargets=r.filter((([n,e])=>n>=0&&n<this.GRID_SIZE&&e>=0&&e<this.GRID_SIZE&&!this.attackedCells.has(`${n},${e}`))).concat(this.potentialTargets)}}function v(){const n=10;let e,t,r,o;function i(e,t){const r=document.getElementById(`${e}-board`);if(r){r.innerHTML="",r.classList.add("board");for(let o=0;o<n;o++)for(let i=0;i<n;i++){const n=document.createElement("div");n.classList.add("cell"),n.classList.add(`${e}-cell`),n.dataset.row=i.toString(),n.dataset.col=o.toString(),"enemy"===e&&n.addEventListener("click",(()=>a(o,i,t,n))),r.appendChild(n)}}}function a(n,e,t,r){if(!o||r.classList.contains("hit")||r.classList.contains("miss"))return;o=!1;const i=t.receiveAttack(n,e);if(function(n,e){e?(n.classList.add("hit"),n.textContent="×"):(n.classList.add("miss"),n.textContent="○")}(r,i),i){const r=t.getShipAt(n,e);if(r&&r.isSunk()&&(console.log(r.getName()+" is sunk"),c("enemy",t)),t.allShipsSunk())return void u(t);setTimeout((()=>{o=!0,s()}),500)}else setTimeout(l,500)}function s(){o=!0}function l(){if(o)return;const[n,t]=r.makeMove(),i=document.querySelector(`.player-cell[data-col="${n}"][data-row="${t}"]`);if(e.getShipAt(n,t)){if(i.classList.add("hit"),c("player",e),e.allShipsSunk())return void u(e);setTimeout(l,500)}else i.classList.add("miss"),c("player",e),o=!0,s()}function c(e,t){const r=document.getElementById(`${e}-board`);if(!r)return;const o=r.querySelectorAll(".cell");t.getAllMissedCells().forEach((([e,t])=>{o[e*n+t].classList.add("miss")}))}function A(){document.querySelectorAll(".game-container").forEach((n=>{n.remove()}));const n=document.createElement("div");n.classList.add("game-container");const a=d("Player"),s=d("Enemy");n.appendChild(a),n.appendChild(s),(document.getElementById("app")||document.body).appendChild(n),e=new g("player"),t=new g("enemy"),r=new b(e),i("player",e),t.placeShipsRandomly(),function(n,e){document.querySelector(".main-window").classList.add("non-interactive");const t=10,r=[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}];let o=0,i="vertical";function a(){o=0,n=new g("player"),document.querySelectorAll(".placement-cell").forEach((n=>{n.classList.remove("ship-placed")}))}function s(){n.placeShipsRandomly(),p()}function l(){i="horizontal"===i?"vertical":"horizontal"}function c(e,a){const s=r[o],l=new C(s.name,s.length,i);n.placeShip(l,e,a)&&(function(n,e){const a=r[o],s=document.querySelectorAll(".placement-cell");if("vertical"==i)for(let r=0;r<a.length;r++)s[n*t+(e+r)].classList.add("ship-placed");if("horizontal"==i)for(let r=0;r<a.length;r++)s[(n+r)*t+e].classList.add("ship-placed")}(e,a),o++,o>=r.length&&p())}function A(n,e){u();const a=r[o],s=document.querySelectorAll(".placement-cell");for(let r=0;r<a.length;r++){const o="vertical"===i?e+r:e,l="horizontal"===i?n+r:n;if(o<t&&l<t){const r=l*t+o;d(e,n,a.length)?s[r].classList.add("preview"):s[r].classList.add("invalid-preview")}}}function d(n,e,r){return"horizontal"===i?e+r<=t:n+r<=t}function u(){document.querySelectorAll(".placement-cell").forEach((n=>{n.classList.remove("preview"),n.classList.remove("invalid-preview")}))}function p(){const r=document.querySelector(".placement-window");r&&r.remove(),document.querySelector(".main-window").classList.remove("non-interactive"),function(){const e=document.getElementById("player-board");if(!e)return;const r=e.querySelectorAll(".cell");for(let e=0;e<t;e++)for(let o=0;o<t;o++)n.getShipAt(e,o)&&r[e*t+o].classList.add("ship")}(),e()}!function(){const n=document.createElement("div");n.classList.add("placement-window");const e=document.createElement("h2");e.textContent="Place Your Ships",n.appendChild(e);const r=function(){const n=document.createElement("div");n.classList.add("board"),n.classList.add("placement-board");for(let e=0;e<t;e++)for(let r=0;r<t;r++){const t=document.createElement("div");t.classList.add("placement-cell"),t.dataset.row=r.toString(),t.dataset.col=e.toString(),t.addEventListener("click",(()=>c(e,r))),t.addEventListener("mouseover",(()=>A(e,r))),t.addEventListener("mouseout",u),n.appendChild(t)}return n}();n.appendChild(r);const o=function(){const n=document.createElement("div");n.classList.add("placement-controls");const e=document.createElement("button");e.textContent="Rotate Ship",e.addEventListener("click",l),n.appendChild(e);const t=document.createElement("button");t.textContent="Randomize",t.addEventListener("click",s),n.appendChild(t);const r=document.createElement("button");return r.textContent="Restart",r.addEventListener("click",a),n.appendChild(r),n}();n.appendChild(o),document.body.insertBefore(n,document.body.firstChild)}()}(e,(()=>{i("enemy",t),o=!0}))}function d(n){const e=document.createElement("div");e.classList.add("board-container");const t=document.createElement("h2");t.textContent=`${n} board`;const r=document.createElement("div");return r.id=`${n.toLowerCase()}-board`,r.classList.add("board"),e.appendChild(t),e.appendChild(r),e}function u(n){const e=document.querySelector(".game-container"),t=document.getElementById("finale-result");"player"===n.getName()?(t.textContent="AI Wins",alert("AI wins!")):(t.textContent="Player Wins",alert("Player wins!")),e.style.pointerEvents="none"}return{startUp:function(){A();const n=document.getElementById("new-game-btn");n?n.addEventListener("click",A):console.error("New game button not found")}}}document.addEventListener("DOMContentLoaded",(()=>{v().startUp()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQVd2RCxpQkFBaUIsUUFBU2dCLEdBR3JDbkUsUUFBUTJHLE1BQU0sNEJBRXRCLEVBa0JKLENFNUtJN0wsU0FBU3FJLGlCQUFpQixvQkFBb0IsS0FDOUJkLElBQ1JvRSxTQUFTLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc3R5bGUvc3R5bGUuY3NzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc3R5bGUvc3R5bGUuY3NzP2M5ZjAiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvU2hpcC50cyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9HYW1lYm9hcmQudHMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvRW5lbXlBaS50cyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9Eb20udHMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvU2hpcFBsYWNlbWVudFdpbmRvdy50cyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCp7XG4gICAgLS13YXRlci1ibHVlOiAjM2VhNGYwO1xuICAgIC0td2F0ZXItYmx1ZS1ob3ZlcjojMGE2YmJmO1xuICAgIC0tc2hpcC1jb2xvcjogIzQ0NDQ0NDtcbiAgICAtLWhpdC1jb2xvcjogI2ZmNmI2YjtcbiAgICAtLW1pc3MtY29sb3I6ICNjNWM1YzU7XG59XG5cbmJvZHkge1xuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xufVxuXG4ubWFpbi13aW5kb3d7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbmhlYWRlcntcbiAgICB3aWR0aDogMTAwdnc7XG4gICAgbWluLXdpZHRoOiAzNTBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYm9yZGVyLWJvdHRvbTogZ3JleSBzb2xpZCAycHg7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xufVxuXG4udGl0bGV7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAxcmVtO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xufVxuXG4jYXBwe1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuI25ldy1nYW1lLWJ0bntcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICBwYWRkaW5nOiAwLjNyZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZSk7XG4gICAgd2lkdGg6IDhyZW07XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbiNuZXctZ2FtZS1idG46aG92ZXJ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZS1ob3Zlcik7XG59XG5cbi5nYW1lLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6IDNyZW07XG4gICAgd2lkdGg6IDgwdnc7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xufVxuXG4uYm9hcmQtY29udGFpbmVyIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5ib2FyZCB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgMWZyKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCA7XG4gICAgd2lkdGg6IDM1MHB4O1xuICAgIGhlaWdodDogMzUwcHg7XG59XG5cbi5jZWxsIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICBhc3BlY3QtcmF0aW86IDE7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuI2VuZW15LWJvYXJkID4gLmNlbGw6aG92ZXJ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2F0ZXItYmx1ZS1ob3Zlcik7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc2hpcCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2hpcC1jb2xvcik7XG59XG5cbi5oaXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpdC1jb2xvcik7XG4gICAgY29sb3I6ICNmZmZmZmY7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4ubWlzcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlzcy1jb2xvcik7XG4gICAgY29sb3I6ICMwMDAwMDA7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4jZmluYWxlLXJlc3VsdHtcbiAgICBmb250LXNpemU6IDNyZW07XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICB3aWR0aDogMjByZW07XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xufVxuXG4vKiBTaGlwIFBsYWNlbWVudCB3aW5kb3cgKi9cbi5wbGFjZW1lbnQtd2luZG93IHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiA1MCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsMCwwLDAuMyk7XG4gICAgei1pbmRleDogMTAwMDtcbn1cblxuLnBsYWNlbWVudC1jZWxsIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICBhc3BlY3QtcmF0aW86IDE7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4ucGxhY2VtZW50LWNlbGwucHJldmlldyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAyNTUsIDAsIDAuMyk7XG59XG5cbi5wbGFjZW1lbnQtY2VsbC5pbnZhbGlkLXByZXZpZXcge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDAsIDApO1xufVxuXG4ucGxhY2VtZW50LWNlbGwuc2hpcC1wbGFjZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNoaXAtY29sb3IpO1xufVxuXG4ucGxhY2VtZW50LWNvbnRyb2xzIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4ubm9uLWludGVyYWN0aXZlIHtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICBmaWx0ZXI6IGJsdXIoMTBweCk7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0kscUJBQXFCO0lBQ3JCLDBCQUEwQjtJQUMxQixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLDhCQUE4QjtJQUM5QixTQUFTO0lBQ1QsVUFBVTtJQUNWLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLDZCQUE2QjtJQUM3QixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsU0FBUztJQUNULGFBQWE7SUFDYixtQ0FBbUM7QUFDdkM7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixtQ0FBbUM7SUFDbkMsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHlDQUF5QztBQUM3Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixTQUFTO0lBQ1QsV0FBVztJQUNYLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNDQUFzQztJQUN0QyxtQ0FBbUM7SUFDbkMsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksbUNBQW1DO0lBQ25DLHVCQUF1QjtJQUN2QixlQUFlO0lBQ2YsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLHlDQUF5QztJQUN6QyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksbUNBQW1DO0FBQ3ZDOztBQUVBO0lBQ0ksa0NBQWtDO0lBQ2xDLGNBQWM7SUFDZCxlQUFlO0lBQ2Ysb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksbUNBQW1DO0lBQ25DLGNBQWM7SUFDZCxlQUFlO0lBQ2Ysb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsbUNBQW1DO0lBQ25DLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osa0JBQWtCO0FBQ3RCOztBQUVBLDBCQUEwQjtBQUMxQjtJQUNJLGVBQWU7SUFDZixRQUFRO0lBQ1IsU0FBUztJQUNULGdDQUFnQztJQUNoQyx1QkFBdUI7SUFDdkIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixvQ0FBb0M7SUFDcEMsYUFBYTtBQUNqQjs7QUFFQTtJQUNJLG1DQUFtQztJQUNuQyx1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxzQ0FBc0M7QUFDMUM7O0FBRUE7SUFDSSxnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxtQ0FBbUM7QUFDdkM7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKntcXG4gICAgLS13YXRlci1ibHVlOiAjM2VhNGYwO1xcbiAgICAtLXdhdGVyLWJsdWUtaG92ZXI6IzBhNmJiZjtcXG4gICAgLS1zaGlwLWNvbG9yOiAjNDQ0NDQ0O1xcbiAgICAtLWhpdC1jb2xvcjogI2ZmNmI2YjtcXG4gICAgLS1taXNzLWNvbG9yOiAjYzVjNWM1O1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcblxcbi5tYWluLXdpbmRvd3tcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbmhlYWRlcntcXG4gICAgd2lkdGg6IDEwMHZ3O1xcbiAgICBtaW4td2lkdGg6IDM1MHB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJvcmRlci1ib3R0b206IGdyZXkgc29saWQgMnB4O1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxufVxcblxcbi50aXRsZXtcXG4gICAgZm9udC1zaXplOiAycmVtO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDFyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUpO1xcbn1cXG5cXG4jYXBwe1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4jbmV3LWdhbWUtYnRue1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcXG4gICAgcGFkZGluZzogMC4zcmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcXG4gICAgd2lkdGg6IDhyZW07XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbiNuZXctZ2FtZS1idG46aG92ZXJ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhdGVyLWJsdWUtaG92ZXIpO1xcbn1cXG5cXG4uZ2FtZS1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDNyZW07XFxuICAgIHdpZHRoOiA4MHZ3O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZmxleC1mbG93OiByb3cgd3JhcDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG59XFxuXFxuLmJvYXJkLWNvbnRhaW5lciB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmJvYXJkIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCA7XFxuICAgIHdpZHRoOiAzNTBweDtcXG4gICAgaGVpZ2h0OiAzNTBweDtcXG59XFxuXFxuLmNlbGwge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICAgIGFzcGVjdC1yYXRpbzogMTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMjRweDtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbiNlbmVteS1ib2FyZCA+IC5jZWxsOmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlLWhvdmVyKTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uc2hpcCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNoaXAtY29sb3IpO1xcbn1cXG5cXG4uaGl0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taGl0LWNvbG9yKTtcXG4gICAgY29sb3I6ICNmZmZmZmY7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5taXNzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlzcy1jb2xvcik7XFxuICAgIGNvbG9yOiAjMDAwMDAwO1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4jZmluYWxlLXJlc3VsdHtcXG4gICAgZm9udC1zaXplOiAzcmVtO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICB3aWR0aDogMjByZW07XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG59XFxuXFxuLyogU2hpcCBQbGFjZW1lbnQgd2luZG93ICovXFxuLnBsYWNlbWVudC13aW5kb3cge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHRvcDogNTAlO1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLDAsMCwwLjMpO1xcbiAgICB6LWluZGV4OiAxMDAwO1xcbn1cXG5cXG4ucGxhY2VtZW50LWNlbGwge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13YXRlci1ibHVlKTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICAgIGFzcGVjdC1yYXRpbzogMTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucGxhY2VtZW50LWNlbGwucHJldmlldyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMjU1LCAwLCAwLjMpO1xcbn1cXG5cXG4ucGxhY2VtZW50LWNlbGwuaW52YWxpZC1wcmV2aWV3IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMCwgMCk7XFxufVxcblxcbi5wbGFjZW1lbnQtY2VsbC5zaGlwLXBsYWNlZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNoaXAtY29sb3IpO1xcbn1cXG5cXG4ucGxhY2VtZW50LWNvbnRyb2xzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubm9uLWludGVyYWN0aXZlIHtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIGZpbHRlcjogYmx1cigxMHB4KTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvLyBTaGlwIGNsYXNzIHJlcHJlc2VudHMgYSBzaGlwIGluIHRoZSBCYXR0bGVzaGlwIGdhbWVcbmV4cG9ydCBjbGFzcyBTaGlwIHtcbiAgICAvLyBDb25zdHJ1Y3RvciBpbml0aWFsaXplcyBhIHNoaXAgd2l0aCBhIGdpdmVuIGxlbmd0aFxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGxlbmd0aCwgb3JpZW50YXRpb24pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zaGlwTGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLm51bWJlck9mSGl0cyA9IDA7XG4gICAgICAgIHRoaXMuc3VuayA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgc2hpcFxuICAgIGdldExlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hpcExlbmd0aDtcbiAgICB9XG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGhpdHMgdGhlIHNoaXAgaGFzIHRha2VuXG4gICAgZ2V0TnVtYmVyT2ZIaXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5udW1iZXJPZkhpdHM7XG4gICAgfVxuICAgIC8vIENoZWNrcyBpZiB0aGUgc2hpcCBpcyBzdW5rXG4gICAgaXNTdW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdW5rO1xuICAgIH1cbiAgICAvLyBSZWdpc3RlcnMgYSBoaXQgb24gdGhlIHNoaXAgYW5kIGNoZWNrcyBpZiBpdCdzIHN1bmtcbiAgICBnZXRIaXQoKSB7XG4gICAgICAgIHRoaXMubnVtYmVyT2ZIaXRzKys7XG4gICAgICAgIGlmICh0aGlzLm51bWJlck9mSGl0cyA+PSB0aGlzLnNoaXBMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc3VuayA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNoaXAgfSBmcm9tICcuL1NoaXAnO1xuLy8gR2FtZWJvYXJkIGNsYXNzIHJlcHJlc2VudHMgdGhlIGdhbWUgYm9hcmQgZm9yIGEgcGxheWVyXG5leHBvcnQgY2xhc3MgR2FtZWJvYXJkIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHRoaXMuc2hpcHMgPSBbXTtcbiAgICAgICAgdGhpcy5HUklEX1NJWkUgPSAxMDtcbiAgICAgICAgdGhpcy5udW1iZXJPZlNoaXBzID0gMDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5ib2FyZCA9IFtdO1xuICAgICAgICB0aGlzLm1pc3NlZFNob3RzID0gW107XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuR1JJRF9TSVpFOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbaV0gPSBbXTtcbiAgICAgICAgICAgIHRoaXMubWlzc2VkU2hvdHNbaV0gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5HUklEX1NJWkU7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbaV1bal0gPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMubWlzc2VkU2hvdHNbaV1bal0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxuICAgIC8vIFBsYWNlIGEgc2hpcCBvbiB0aGUgYm9hcmQgd2l0aCBhZGRpdGlvbmFsIGNoZWNrc1xuICAgIHBsYWNlU2hpcChTaGlwLCBjb2x1bW4sIHJvdykge1xuICAgICAgICBsZXQgcGxhY2VzID0gW107XG4gICAgICAgIGlmIChTaGlwLmlzVmVydGljYWwoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgc2hpcCBwbGFjZW1lbnQgaXMgd2l0aGluIGJvdW5kc1xuICAgICAgICAgICAgaWYgKHJvdyArIFNoaXAuZ2V0TGVuZ3RoKCkgPiB0aGlzLkdSSURfU0laRSB8fCBjb2x1bW4gPCAwIHx8IHJvdyA8IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJsYXAgYW5kIG9uZS1jZWxsIGRpc3RhbmNlXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IFNoaXAuZ2V0TGVuZ3RoKCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0NlbGxBdmFpbGFibGUoY29sdW1uLCByb3cgKyBpKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGxhY2UgdGhlIHNoaXAgYWZ0ZXIgc3VjY2Vzc2Z1bCBjaGVja3NcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgU2hpcC5nZXRMZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFtjb2x1bW5dW3JvdyArIGldID0gU2hpcDtcbiAgICAgICAgICAgICAgICBwbGFjZXMucHVzaChbY29sdW1uLCByb3cgKyBpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoU2hpcC5pc1ZlcnRpY2FsKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBzaGlwIHBsYWNlbWVudCBpcyB3aXRoaW4gYm91bmRzXG4gICAgICAgICAgICBpZiAoY29sdW1uICsgU2hpcC5nZXRMZW5ndGgoKSA+IHRoaXMuR1JJRF9TSVpFIHx8IGNvbHVtbiA8IDAgfHwgcm93IDwgMClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3Igb3ZlcmxhcCBhbmQgb25lLWNlbGwgZGlzdGFuY2VcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgU2hpcC5nZXRMZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ2VsbEF2YWlsYWJsZShjb2x1bW4gKyBpLCByb3cpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQbGFjZSB0aGUgc2hpcCBhZnRlciBzdWNjZXNzZnVsIGNoZWNrc1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBTaGlwLmdldExlbmd0aCgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW2NvbHVtbiArIGldW3Jvd10gPSBTaGlwO1xuICAgICAgICAgICAgICAgIHBsYWNlcy5wdXNoKFtjb2x1bW4gKyBpLCByb3ddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNoaXBzLnB1c2goe1xuICAgICAgICAgICAgc2hpcDogU2hpcCxcbiAgICAgICAgICAgIHBsYWNlczogcGxhY2VzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm51bWJlck9mU2hpcHMrKztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIEhlbHBlciB0byBjaGVjayBpZiBhIHBvc2l0aW9uIGlzIHdpdGhpbiB0aGUgZ2FtZSBib2FyZCBib3VuZHNcbiAgICBpc1dpdGhpbkJvdW5kcyhjb2x1bW4sIHJvdykge1xuICAgICAgICByZXR1cm4gY29sdW1uID49IDAgJiYgY29sdW1uIDwgdGhpcy5HUklEX1NJWkUgJiYgcm93ID49IDAgJiYgcm93IDwgdGhpcy5HUklEX1NJWkU7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIGEgY2VsbCBpcyBhdmFpbGFibGUgKG5vIG92ZXJsYXApIGFuZCBoYXMgYXQgbGVhc3Qgb25lIGNlbGwgZGlzdGFuY2VcbiAgICBpc0NlbGxBdmFpbGFibGUoY29sdW1uLCByb3cpIHtcbiAgICAgICAgaWYgKHRoaXMuYm9hcmRbY29sdW1uXVtyb3ddICE9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBDaGVjayBpZiB0aGVyZSdzIGFscmVhZHkgYSBzaGlwXG4gICAgICAgIC8vIENoZWNrIHN1cnJvdW5kaW5nIGNlbGxzIGZvciBvbmUtY2VsbCBkaXN0YW5jZVxuICAgICAgICBmb3IgKGxldCBpID0gLTE7IGkgPD0gMTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gLTE7IGogPD0gMTsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tDb2wgPSBjb2x1bW4gKyBpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrUm93ID0gcm93ICsgajtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1dpdGhpbkJvdW5kcyhjaGVja0NvbCwgY2hlY2tSb3cpICYmIHRoaXMuYm9hcmRbY2hlY2tDb2xdW2NoZWNrUm93XSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEEgc2hpcCBpcyB0b28gY2xvc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIEdldCB0aGUgc2hpcCBhdCBhIHNwZWNpZmljIHBvc2l0aW9uXG4gICAgZ2V0U2hpcEF0KGNvbHVtbiwgcm93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvYXJkW2NvbHVtbl1bcm93XTtcbiAgICB9XG4gICAgLy8gUmVjZWl2ZSBhbiBhdHRhY2sgYXQgYSBzcGVjaWZpYyBwb3NpdGlvblxuICAgIHJlY2VpdmVBdHRhY2soY29sdW1uLCByb3cpIHtcbiAgICAgICAgbGV0IHNoaXAgPSB0aGlzLmdldFNoaXBBdChjb2x1bW4sIHJvdyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMubnVtYmVyT2ZTaGlwcyk7XG4gICAgICAgIGlmIChzaGlwID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm1pc3NlZFNob3RzW2NvbHVtbl1bcm93XSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2hpcC5nZXRIaXQoKTtcbiAgICAgICAgaWYgKHNoaXAuaXNTdW5rKCkpIHtcbiAgICAgICAgICAgIHRoaXMubnVtYmVyT2ZTaGlwcy0tO1xuICAgICAgICAgICAgdGhpcy5tYXJrQWRqYWNlbnRDZWxscyhzaGlwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbWFya0FkamFjZW50Q2VsbHMoc2hpcCkge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gW1stMSwgLTFdLCBbLTEsIDBdLCBbLTEsIDFdLCBbMCwgLTFdLCBbMCwgMV0sIFsxLCAtMV0sIFsxLCAwXSwgWzEsIDFdXTtcbiAgICAgICAgdGhpcy5zaGlwcy5mb3JFYWNoKChzaGlwSW5mbykgPT4ge1xuICAgICAgICAgICAgaWYgKHNoaXBJbmZvLnNoaXAgPT09IHNoaXApIHtcbiAgICAgICAgICAgICAgICBzaGlwSW5mby5wbGFjZXMuZm9yRWFjaCgocGxhY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucy5mb3JFYWNoKChbZHgsIGR5XSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRqQ29sID0gcGxhY2VbMF0gKyBkeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkalJvdyA9IHBsYWNlWzFdICsgZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1dpdGhpbkJvdW5kcyhhZGpDb2wsIGFkalJvdykgJiYgdGhpcy5nZXRTaGlwQXQoYWRqQ29sLCBhZGpSb3cpICE9PSBzaGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taXNzZWRTaG90c1thZGpDb2xdW2FkalJvd10gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIE5ldyBtZXRob2QgdG8gZ2V0IGFsbCBjZWxscyB0aGF0IHNob3VsZCBiZSBtYXJrZWQgYXMgJ21pc3MnXG4gICAgZ2V0QWxsTWlzc2VkQ2VsbHMoKSB7XG4gICAgICAgIGxldCBtaXNzZWRDZWxscyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCB0aGlzLkdSSURfU0laRTsgY29sKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHRoaXMuR1JJRF9TSVpFOyByb3crKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pc3NlZFNob3RzW2NvbF1bcm93XSkge1xuICAgICAgICAgICAgICAgICAgICBtaXNzZWRDZWxscy5wdXNoKFtjb2wsIHJvd10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWlzc2VkQ2VsbHM7XG4gICAgfVxuICAgIC8vIEdldCBhbGwgbWlzc2VkIGF0dGFja3NcbiAgICBnZXRNaXNzZWRTaG90cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlzc2VkU2hvdHM7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIGFsbCBzaGlwcyBhcmUgc3Vua1xuICAgIGFsbFNoaXBzU3VuaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyT2ZTaGlwcyA8PSAwO1xuICAgIH1cbiAgICAvL01ldGhvZCB0byBwbGFjZSBzaGlwcyByYW5kb21seVxuICAgIHBsYWNlU2hpcHNSYW5kb21seSgpIHtcbiAgICAgICAgY29uc3Qgc2hpcHMgPSBbXG4gICAgICAgICAgICB7IG5hbWU6ICdDYXJyaWVyJywgbGVuZ3RoOiA1IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdCYXR0bGVzaGlwJywgbGVuZ3RoOiA0IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdDcnVpc2VyJywgbGVuZ3RoOiAzIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdTdWJtYXJpbmUnLCBsZW5ndGg6IDMgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0Rlc3Ryb3llcicsIGxlbmd0aDogMiB9XG4gICAgICAgIF07XG4gICAgICAgIHNoaXBzLmZvckVhY2goc2hpcEluZm8gPT4ge1xuICAgICAgICAgICAgbGV0IHBsYWNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgd2hpbGUgKCFwbGFjZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLkdSSURfU0laRSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5HUklEX1NJWkUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gTWF0aC5yYW5kb20oKSA8IDAuNSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hpcCA9IG5ldyBTaGlwKHNoaXBJbmZvLm5hbWUsIHNoaXBJbmZvLmxlbmd0aCwgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYWNlU2hpcChzaGlwLCBjb2wsIHJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBFbmVteUFpIHtcbiAgICBjb25zdHJ1Y3RvcihvcHBvbmVudEJvYXJkKSB7XG4gICAgICAgIHRoaXMub3Bwb25lbnRCb2FyZCA9IG9wcG9uZW50Qm9hcmQ7XG4gICAgICAgIHRoaXMuR1JJRF9TSVpFID0gMTA7XG4gICAgICAgIHRoaXMubGFzdEhpdCA9IG51bGw7XG4gICAgICAgIHRoaXMucG90ZW50aWFsVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLmF0dGFja2VkQ2VsbHMgPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIG1ha2VNb3ZlKCkge1xuICAgICAgICBsZXQgbW92ZTtcbiAgICAgICAgaWYgKHRoaXMubGFzdEhpdCAmJiB0aGlzLnBvdGVudGlhbFRhcmdldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbW92ZSA9IHRoaXMudGFyZ2V0QWRqYWNlbnRDZWxscygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbW92ZSA9IHRoaXMucmFuZG9tTW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0YWNrZWRDZWxscy5hZGQoYCR7bW92ZVswXX0sJHttb3ZlWzFdfWApO1xuICAgICAgICByZXR1cm4gbW92ZTtcbiAgICB9XG4gICAgdGFyZ2V0QWRqYWNlbnRDZWxscygpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMucG90ZW50aWFsVGFyZ2V0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBtb3ZlID0gdGhpcy5wb3RlbnRpYWxUYXJnZXRzLnBvcCgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmF0dGFja2VkQ2VsbHMuaGFzKGAke21vdmVbMF19LCR7bW92ZVsxXX1gKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMub3Bwb25lbnRCb2FyZC5yZWNlaXZlQXR0YWNrKG1vdmVbMF0sIG1vdmVbMV0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0SGl0ID0gbW92ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRBZGphY2VudENlbGxzKG1vdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbW92ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBhbGwgcG90ZW50aWFsIHRhcmdldHMgaGF2ZSBiZWVuIGF0dGFja2VkLCByZXNldCBhbmQgbWFrZSBhIHJhbmRvbSBtb3ZlXG4gICAgICAgIHRoaXMubGFzdEhpdCA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmRvbU1vdmUoKTtcbiAgICB9XG4gICAgcmFuZG9tTW92ZSgpIHtcbiAgICAgICAgbGV0IG1vdmU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIG1vdmUgPSBbXG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5HUklEX1NJWkUpLFxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuR1JJRF9TSVpFKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSB3aGlsZSAodGhpcy5hdHRhY2tlZENlbGxzLmhhcyhgJHttb3ZlWzBdfSwke21vdmVbMV19YCkpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLm9wcG9uZW50Qm9hcmQucmVjZWl2ZUF0dGFjayhtb3ZlWzBdLCBtb3ZlWzFdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0SGl0ID0gbW92ZTtcbiAgICAgICAgICAgIHRoaXMuYWRkQWRqYWNlbnRDZWxscyhtb3ZlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW92ZTtcbiAgICB9XG4gICAgYWRkQWRqYWNlbnRDZWxscyhtb3ZlKSB7XG4gICAgICAgIGNvbnN0IFtjb2wsIHJvd10gPSBtb3ZlO1xuICAgICAgICBjb25zdCBhZGphY2VudENlbGxzID0gW1xuICAgICAgICAgICAgW2NvbCAtIDEsIHJvd10sIFtjb2wgKyAxLCByb3ddLCBbY29sLCByb3cgLSAxXSwgW2NvbCwgcm93ICsgMV1cbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5wb3RlbnRpYWxUYXJnZXRzID0gYWRqYWNlbnRDZWxscy5maWx0ZXIoKFtjb2wsIHJvd10pID0+IGNvbCA+PSAwICYmIGNvbCA8IHRoaXMuR1JJRF9TSVpFICYmIHJvdyA+PSAwICYmIHJvdyA8IHRoaXMuR1JJRF9TSVpFICYmXG4gICAgICAgICAgICAhdGhpcy5hdHRhY2tlZENlbGxzLmhhcyhgJHtjb2x9LCR7cm93fWApKS5jb25jYXQodGhpcy5wb3RlbnRpYWxUYXJnZXRzKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHYW1lYm9hcmQgfSBmcm9tIFwiLi9HYW1lYm9hcmRcIjtcbmltcG9ydCB7IFNoaXBQbGFjZW1lbnRXaW5kb3cgfSBmcm9tIFwiLi9TaGlwUGxhY2VtZW50V2luZG93XCI7XG5pbXBvcnQgeyBFbmVteUFpIH0gZnJvbSBcIi4vRW5lbXlBaVwiO1xuZXhwb3J0IGZ1bmN0aW9uIERvbSgpIHtcbiAgICBjb25zdCBHUklEX1NJWkUgPSAxMDtcbiAgICBsZXQgcGxheWVyQm9hcmQ7XG4gICAgbGV0IGVuZW15Qm9hcmQ7XG4gICAgbGV0IGFpUGxheWVyO1xuICAgIGxldCBpc1BsYXllclR1cm47XG4gICAgLy8gQ3JlYXRlIGEgZ3JpZCBmb3IgdGhlIGdhbWUgYm9hcmRcbiAgICBmdW5jdGlvbiBjcmVhdGVHcmlkKGNvbnRhaW5lcklkLCBnYW1lYm9hcmQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7Y29udGFpbmVySWR9LWJvYXJkYCk7XG4gICAgICAgIGlmICghY29udGFpbmVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7IC8vIENsZWFyIGV4aXN0aW5nIGNvbnRlbnRcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2JvYXJkJyk7XG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IEdSSURfU0laRTsgY29sKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEdSSURfU0laRTsgcm93KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdjZWxsJyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKGAke2NvbnRhaW5lcklkfS1jZWxsYCk7XG4gICAgICAgICAgICAgICAgY2VsbC5kYXRhc2V0LnJvdyA9IHJvdy50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGNlbGwuZGF0YXNldC5jb2wgPSBjb2wudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVySWQgPT09ICdlbmVteScpXG4gICAgICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBoYW5kbGVDZWxsQ2xpY2soY29sLCByb3csIGdhbWVib2FyZCwgY2VsbCkpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBIYW5kbGUgY2xpY2sgZXZlbnRzIG9uIHRoZSBlbmVteSBib2FyZFxuICAgIGZ1bmN0aW9uIGhhbmRsZUNlbGxDbGljayhjb2wsIHJvdywgZ2FtZWJvYXJkLCBjZWxsKSB7XG4gICAgICAgIGlmICghaXNQbGF5ZXJUdXJuIHx8IGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaXQnKSB8fCBjZWxsLmNsYXNzTGlzdC5jb250YWlucygnbWlzcycpKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIElnbm9yZSBjbGlja3Mgd2hlbiBpdCdzIG5vdCBwbGF5ZXIncyB0dXJuIG9yIG9uIGFscmVhZHkgYXR0YWNrZWQgY2VsbHNcbiAgICAgICAgfVxuICAgICAgICBpc1BsYXllclR1cm4gPSBmYWxzZTsgLy8gSW1tZWRpYXRlbHkgc2V0IHRvIGZhbHNlIHRvIHByZXZlbnQgbXVsdGlwbGUgY2xpY2tzXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgcm93KTtcbiAgICAgICAgdXBkYXRlQ2VsbEFwcGVhcmFuY2UoY2VsbCwgcmVzdWx0KTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcCA9IGdhbWVib2FyZC5nZXRTaGlwQXQoY29sLCByb3cpO1xuICAgICAgICAgICAgaWYgKHNoaXAgJiYgc2hpcC5pc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNoaXAuZ2V0TmFtZSgpICsgJyBpcyBzdW5rJyk7XG4gICAgICAgICAgICAgICAgdXBkYXRlR3JpZCgnZW5lbXknLCBnYW1lYm9hcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5hbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIEdhbWVGaW5hbGUoZ2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQbGF5ZXIgZ2V0cyBhbm90aGVyIHR1cm5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGxheWVyVHVybigpO1xuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoYWlUdXJuLCA1MDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBsYXllclR1cm4oKSB7XG4gICAgICAgIGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFpVHVybigpIHtcbiAgICAgICAgaWYgKGlzUGxheWVyVHVybilcbiAgICAgICAgICAgIHJldHVybjsgLy8gU2FmZWd1YXJkIGFnYWluc3QgdW5leHBlY3RlZCBjYWxsc1xuICAgICAgICBjb25zdCBbYWlDb2wsIGFpUm93XSA9IGFpUGxheWVyLm1ha2VNb3ZlKCk7XG4gICAgICAgIGNvbnN0IHBsYXllckNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucGxheWVyLWNlbGxbZGF0YS1jb2w9XCIke2FpQ29sfVwiXVtkYXRhLXJvdz1cIiR7YWlSb3d9XCJdYCk7XG4gICAgICAgIGlmIChwbGF5ZXJCb2FyZC5nZXRTaGlwQXQoYWlDb2wsIGFpUm93KSkge1xuICAgICAgICAgICAgcGxheWVyQ2VsbC5jbGFzc0xpc3QuYWRkKCdoaXQnKTtcbiAgICAgICAgICAgIHVwZGF0ZUdyaWQoJ3BsYXllcicsIHBsYXllckJvYXJkKTtcbiAgICAgICAgICAgIGlmIChwbGF5ZXJCb2FyZC5hbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIEdhbWVGaW5hbGUocGxheWVyQm9hcmQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFJIGdldHMgYW5vdGhlciB0dXJuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGFpVHVybiwgNTAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBsYXllckNlbGwuY2xhc3NMaXN0LmFkZCgnbWlzcycpO1xuICAgICAgICAgICAgdXBkYXRlR3JpZCgncGxheWVyJywgcGxheWVyQm9hcmQpO1xuICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgICAgIHBsYXllclR1cm4oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL0FkZGluZyBtaXNzIGNsYXNzIHRvIGNlbGwgdGhhdCBuZWFyIHRoZSBzdW5rIHNoaXBcbiAgICBmdW5jdGlvbiB1cGRhdGVHcmlkKGNvbnRhaW5lcklkLCBnYW1lYm9hcmQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7Y29udGFpbmVySWR9LWJvYXJkYCk7XG4gICAgICAgIGlmICghY29udGFpbmVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBjZWxscyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuY2VsbCcpO1xuICAgICAgICBjb25zdCBtaXNzZWRDZWxscyA9IGdhbWVib2FyZC5nZXRBbGxNaXNzZWRDZWxscygpO1xuICAgICAgICBtaXNzZWRDZWxscy5mb3JFYWNoKChbY29sLCByb3ddKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNvbCAqIEdSSURfU0laRSArIHJvdztcbiAgICAgICAgICAgIGNlbGxzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdtaXNzJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvL0Z1bmN0aW9uIHRvIHVwZGF0ZSBjZWxsIGFwcGVhcmFuY2VcbiAgICBmdW5jdGlvbiB1cGRhdGVDZWxsQXBwZWFyYW5jZShjZWxsLCBpc0hpdCkge1xuICAgICAgICBpZiAoaXNIaXQpIHtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XG4gICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gJ8OXJzsgLy8gQWRkIGFuIFwiWFwiIG1hcmsgZm9yIGhpdHNcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnbWlzcycpO1xuICAgICAgICAgICAgY2VsbC50ZXh0Q29udGVudCA9ICfil4snOyAvLyBBZGQgYSBjaXJjbGUgZm9yIG1pc3Nlc1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIG5ldyBnYW1lIGJvYXJkXG4gICAgZnVuY3Rpb24gY3JlYXRlTmV3R2FtZWJvYXJkKCkge1xuICAgICAgICBkZWxldGVQcmV2Qm9hcmRzKCk7XG4gICAgICAgIGNvbnN0IGdhbWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZ2FtZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdnYW1lLWNvbnRhaW5lcicpO1xuICAgICAgICBjb25zdCBwbGF5ZXJCb2FyZENvbnRhaW5lciA9IGNyZWF0ZUJvYXJkQ29udGFpbmVyKCdQbGF5ZXInKTtcbiAgICAgICAgY29uc3QgRW5lbXlCb2FyZENvbnRhaW5lciA9IGNyZWF0ZUJvYXJkQ29udGFpbmVyKCdFbmVteScpO1xuICAgICAgICBnYW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHBsYXllckJvYXJkQ29udGFpbmVyKTtcbiAgICAgICAgZ2FtZUNvbnRhaW5lci5hcHBlbmRDaGlsZChFbmVteUJvYXJkQ29udGFpbmVyKTtcbiAgICAgICAgY29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgbWFpbkNvbnRlbnQuYXBwZW5kQ2hpbGQoZ2FtZUNvbnRhaW5lcik7XG4gICAgICAgIHBsYXllckJvYXJkID0gbmV3IEdhbWVib2FyZCgncGxheWVyJyk7XG4gICAgICAgIGVuZW15Qm9hcmQgPSBuZXcgR2FtZWJvYXJkKCdlbmVteScpO1xuICAgICAgICBhaVBsYXllciA9IG5ldyBFbmVteUFpKHBsYXllckJvYXJkKTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBwbGF5ZXIncyBib2FyZCBmaXJzdFxuICAgICAgICBjcmVhdGVHcmlkKCdwbGF5ZXInLCBwbGF5ZXJCb2FyZCk7XG4gICAgICAgIC8vIFBsYWNlIGVuZW15IHNoaXBzIHJhbmRvbWx5XG4gICAgICAgIGVuZW15Qm9hcmQucGxhY2VTaGlwc1JhbmRvbWx5KCk7XG4gICAgICAgIC8vIFRoZW4gb3BlbiB0aGUgc2hpcCBwbGFjZW1lbnQgd2luZG93XG4gICAgICAgIFNoaXBQbGFjZW1lbnRXaW5kb3cocGxheWVyQm9hcmQsICgpID0+IHtcbiAgICAgICAgICAgIC8vIE9ubHkgY3JlYXRlIHRoZSBlbmVteSBib2FyZCBhZnRlciBzaGlwIHBsYWNlbWVudCBpcyBjb21wbGV0ZVxuICAgICAgICAgICAgY3JlYXRlR3JpZCgnZW5lbXknLCBlbmVteUJvYXJkKTtcbiAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBTdGFydCB3aXRoIHNoaXAgcGxhY2VtZW50IGZvciB0aGUgcGxheWVyXG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIGNvbnRhaW5lciBmb3IgYSBnYW1lIGJvYXJkXG4gICAgZnVuY3Rpb24gY3JlYXRlQm9hcmRDb250YWluZXIodGl0bGUpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdib2FyZC1jb250YWluZXInKTtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gYCR7dGl0bGV9IGJvYXJkYDtcbiAgICAgICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYm9hcmQuaWQgPSBgJHt0aXRsZS50b0xvd2VyQ2FzZSgpfS1ib2FyZGA7XG4gICAgICAgIGJvYXJkLmNsYXNzTGlzdC5hZGQoJ2JvYXJkJyk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXIpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYm9hcmQpO1xuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGdhbWUgYm9hcmRzXG4gICAgZnVuY3Rpb24gZGVsZXRlUHJldkJvYXJkcygpIHtcbiAgICAgICAgbGV0IGdhbWVDb250YWluZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdhbWUtY29udGFpbmVyJyk7XG4gICAgICAgIGdhbWVDb250YWluZXJzLmZvckVhY2goY29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIGdhbWVcbiAgICBmdW5jdGlvbiBzdGFydFVwKCkge1xuICAgICAgICBjcmVhdGVOZXdHYW1lYm9hcmQoKTtcbiAgICAgICAgY29uc3QgbmV3R2FtZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXctZ2FtZS1idG4nKTtcbiAgICAgICAgaWYgKG5ld0dhbWVCdG4pIHtcbiAgICAgICAgICAgIG5ld0dhbWVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjcmVhdGVOZXdHYW1lYm9hcmQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk5ldyBnYW1lIGJ1dHRvbiBub3QgZm91bmRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9GaW5pc2ggdGhlIGdhbWVcbiAgICBmdW5jdGlvbiBHYW1lRmluYWxlKGdhbWVib2FyZCkge1xuICAgICAgICBjb25zdCBnYW1lQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWUtY29udGFpbmVyJyk7XG4gICAgICAgIGNvbnN0IGZpbmFsZVJlc3VsdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaW5hbGUtcmVzdWx0Jyk7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0TmFtZSgpID09PSAncGxheWVyJykge1xuICAgICAgICAgICAgZmluYWxlUmVzdWx0LnRleHRDb250ZW50ID0gJ0FJIFdpbnMnO1xuICAgICAgICAgICAgYWxlcnQoXCJBSSB3aW5zIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZpbmFsZVJlc3VsdC50ZXh0Q29udGVudCA9ICdQbGF5ZXIgV2lucyc7XG4gICAgICAgICAgICBhbGVydChcIlBsYXllciB3aW5zIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBnYW1lQ29udGFpbmVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0VXBcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcbmltcG9ydCB7IEdhbWVib2FyZCB9IGZyb20gXCIuL0dhbWVib2FyZFwiO1xuZXhwb3J0IGZ1bmN0aW9uIFNoaXBQbGFjZW1lbnRXaW5kb3cocGxheWVyQm9hcmQsIG9uRmluaXNoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4td2luZG93JykuY2xhc3NMaXN0LmFkZCgnbm9uLWludGVyYWN0aXZlJyk7XG4gICAgY29uc3QgR1JJRF9TSVpFID0gMTA7XG4gICAgY29uc3Qgc2hpcHMgPSBbXG4gICAgICAgIHsgbmFtZTogJ0NhcnJpZXInLCBsZW5ndGg6IDUgfSxcbiAgICAgICAgeyBuYW1lOiAnQmF0dGxlc2hpcCcsIGxlbmd0aDogNCB9LFxuICAgICAgICB7IG5hbWU6ICdDcnVpc2VyJywgbGVuZ3RoOiAzIH0sXG4gICAgICAgIHsgbmFtZTogJ1N1Ym1hcmluZScsIGxlbmd0aDogMyB9LFxuICAgICAgICB7IG5hbWU6ICdEZXN0cm95ZXInLCBsZW5ndGg6IDIgfVxuICAgIF07XG4gICAgbGV0IGN1cnJlbnRTaGlwSW5kZXggPSAwO1xuICAgIGxldCBjdXJyZW50T3JpZW50YXRpb24gPSAndmVydGljYWwnO1xuICAgIC8vIENyZWF0ZSB0aGUgc2hpcCBwbGFjZW1lbnQgd2luZG93XG4gICAgZnVuY3Rpb24gY3JlYXRlUGxhY2VtZW50V2luZG93KCkge1xuICAgICAgICBjb25zdCBwbGFjZW1lbnRXaW5kb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgcGxhY2VtZW50V2luZG93LmNsYXNzTGlzdC5hZGQoJ3BsYWNlbWVudC13aW5kb3cnKTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9ICdQbGFjZSBZb3VyIFNoaXBzJztcbiAgICAgICAgcGxhY2VtZW50V2luZG93LmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgICAgY29uc3QgZ3JpZCA9IGNyZWF0ZVBsYWNlbWVudEdyaWQoKTtcbiAgICAgICAgcGxhY2VtZW50V2luZG93LmFwcGVuZENoaWxkKGdyaWQpO1xuICAgICAgICBjb25zdCBjb250cm9scyA9IGNyZWF0ZUNvbnRyb2xzKCk7XG4gICAgICAgIHBsYWNlbWVudFdpbmRvdy5hcHBlbmRDaGlsZChjb250cm9scyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKHBsYWNlbWVudFdpbmRvdywgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIHRoZSBncmlkIGZvciBzaGlwIHBsYWNlbWVudFxuICAgIGZ1bmN0aW9uIGNyZWF0ZVBsYWNlbWVudEdyaWQoKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZ3JpZC5jbGFzc0xpc3QuYWRkKCdib2FyZCcpO1xuICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoJ3BsYWNlbWVudC1ib2FyZCcpO1xuICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBHUklEX1NJWkU7IGNvbCsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBHUklEX1NJWkU7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgncGxhY2VtZW50LWNlbGwnKTtcbiAgICAgICAgICAgICAgICBjZWxsLmRhdGFzZXQucm93ID0gcm93LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY2VsbC5kYXRhc2V0LmNvbCA9IGNvbC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBwbGFjZVNoaXAoY29sLCByb3cpKTtcbiAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHByZXZpZXdTaGlwKGNvbCwgcm93KSk7XG4gICAgICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGNsZWFyUHJldmlldyk7XG4gICAgICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3JpZDtcbiAgICB9XG4gICAgLy9SZXN0YXJ0IHBsYWNlbWVudCBib1xuICAgIGZ1bmN0aW9uIHJlc3RhcnQoKSB7XG4gICAgICAgIGN1cnJlbnRTaGlwSW5kZXggPSAwO1xuICAgICAgICBwbGF5ZXJCb2FyZCA9IG5ldyBHYW1lYm9hcmQoJ3BsYXllcicpO1xuICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGFjZW1lbnQtY2VsbCcpO1xuICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ3NoaXAtcGxhY2VkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgY29udHJvbCBlbGVtZW50cyAocm90YXRlIGJ1dHRvbiBhbmQgc2hpcCBpbmZvKVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xzKCkge1xuICAgICAgICBjb25zdCBjb250cm9scyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250cm9scy5jbGFzc0xpc3QuYWRkKCdwbGFjZW1lbnQtY29udHJvbHMnKTtcbiAgICAgICAgY29uc3Qgcm90YXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIHJvdGF0ZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdSb3RhdGUgU2hpcCc7XG4gICAgICAgIHJvdGF0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJvdGF0ZVNoaXApO1xuICAgICAgICBjb250cm9scy5hcHBlbmRDaGlsZChyb3RhdGVCdXR0b24pO1xuICAgICAgICBjb25zdCBSYW5kb21CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgUmFuZG9tQnRuLnRleHRDb250ZW50ID0gJ1JhbmRvbWl6ZSc7XG4gICAgICAgIFJhbmRvbUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJhbmRvbWl6ZSk7XG4gICAgICAgIGNvbnRyb2xzLmFwcGVuZENoaWxkKFJhbmRvbUJ0bik7XG4gICAgICAgIGNvbnN0IHJlc3RhcnRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgcmVzdGFydEJ1dHRvbi50ZXh0Q29udGVudCA9ICdSZXN0YXJ0JztcbiAgICAgICAgcmVzdGFydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlc3RhcnQpO1xuICAgICAgICBjb250cm9scy5hcHBlbmRDaGlsZChyZXN0YXJ0QnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xzO1xuICAgIH1cbiAgICBmdW5jdGlvbiByYW5kb21pemUoKSB7XG4gICAgICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcHNSYW5kb21seSgpO1xuICAgICAgICBmaW5pc2hQbGFjZW1lbnQoKTtcbiAgICB9XG4gICAgLy8gUm90YXRlIHRoZSBjdXJyZW50IHNoaXAgb3JpZW50YXRpb25cbiAgICBmdW5jdGlvbiByb3RhdGVTaGlwKCkge1xuICAgICAgICBjdXJyZW50T3JpZW50YXRpb24gPSBjdXJyZW50T3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIC8vIFBsYWNlIGEgc2hpcCBvbiB0aGUgYm9hcmRcbiAgICBmdW5jdGlvbiBwbGFjZVNoaXAoY29sLCByb3cpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNoaXAgPSBzaGlwc1tjdXJyZW50U2hpcEluZGV4XTtcbiAgICAgICAgY29uc3Qgc2hpcCA9IG5ldyBTaGlwKGN1cnJlbnRTaGlwLm5hbWUsIGN1cnJlbnRTaGlwLmxlbmd0aCwgY3VycmVudE9yaWVudGF0aW9uKTtcbiAgICAgICAgaWYgKHBsYXllckJvYXJkLnBsYWNlU2hpcChzaGlwLCBjb2wsIHJvdykpIHtcbiAgICAgICAgICAgIHVwZGF0ZUdyaWQoY29sLCByb3cpO1xuICAgICAgICAgICAgY3VycmVudFNoaXBJbmRleCsrO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTaGlwSW5kZXggPj0gc2hpcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZmluaXNoUGxhY2VtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVXBkYXRlIHRoZSBncmlkIGFmdGVyIHBsYWNpbmcgYSBzaGlwXG4gICAgZnVuY3Rpb24gdXBkYXRlR3JpZChjb2wsIHJvdykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2hpcCA9IHNoaXBzW2N1cnJlbnRTaGlwSW5kZXhdO1xuICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGFjZW1lbnQtY2VsbCcpO1xuICAgICAgICBpZiAoY3VycmVudE9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gY29sICogR1JJRF9TSVpFICsgKHJvdyArIGkpO1xuICAgICAgICAgICAgICAgIGNlbGxzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdzaGlwLXBsYWNlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudE9yaWVudGF0aW9uID09ICdob3Jpem9udGFsJylcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAoY29sICsgaSkgKiBHUklEX1NJWkUgKyByb3c7XG4gICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3NoaXAtcGxhY2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIC8vIFByZXZpZXcgc2hpcCBwbGFjZW1lbnQgb24gaG92ZXJcbiAgICBmdW5jdGlvbiBwcmV2aWV3U2hpcChjb2wsIHJvdykge1xuICAgICAgICBjbGVhclByZXZpZXcoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFNoaXAgPSBzaGlwc1tjdXJyZW50U2hpcEluZGV4XTtcbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxhY2VtZW50LWNlbGwnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcHJldmlld1JvdyA9IGN1cnJlbnRPcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IHJvdyArIGkgOiByb3c7XG4gICAgICAgICAgICBjb25zdCBwcmV2aWV3Q29sID0gY3VycmVudE9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgPyBjb2wgKyBpIDogY29sO1xuICAgICAgICAgICAgaWYgKHByZXZpZXdSb3cgPCBHUklEX1NJWkUgJiYgcHJldmlld0NvbCA8IEdSSURfU0laRSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcHJldmlld0NvbCAqIEdSSURfU0laRSArIHByZXZpZXdSb3c7XG4gICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRQbGFjZW1lbnQocm93LCBjb2wsIGN1cnJlbnRTaGlwLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3ByZXZpZXcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGxzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkLXByZXZpZXcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgcGxhY2VtZW50IGlzIHZhbGlkXG4gICAgZnVuY3Rpb24gaXNWYWxpZFBsYWNlbWVudChyb3csIGNvbCwgc2hpcExlbmd0aCkge1xuICAgICAgICBpZiAoY3VycmVudE9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2wgKyBzaGlwTGVuZ3RoIDw9IEdSSURfU0laRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByb3cgKyBzaGlwTGVuZ3RoIDw9IEdSSURfU0laRTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDbGVhciB0aGUgc2hpcCBwbGFjZW1lbnQgcHJldmlld1xuICAgIGZ1bmN0aW9uIGNsZWFyUHJldmlldygpIHtcbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxhY2VtZW50LWNlbGwnKTtcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdwcmV2aWV3Jyk7XG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmFsaWQtcHJldmlldycpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlUGxheWVyQm9hcmQoKSB7XG4gICAgICAgIGNvbnN0IHBsYXllckJvYXJkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXItYm9hcmQnKTtcbiAgICAgICAgaWYgKCFwbGF5ZXJCb2FyZEVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNlbGxzID0gcGxheWVyQm9hcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IEdSSURfU0laRTsgY29sKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEdSSURfU0laRTsgcm93KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwID0gcGxheWVyQm9hcmQuZ2V0U2hpcEF0KGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNvbCAqIEdSSURfU0laRSArIHJvdztcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRmluaXNoIHRoZSBzaGlwIHBsYWNlbWVudCBwaGFzZVxuICAgIGZ1bmN0aW9uIGZpbmlzaFBsYWNlbWVudCgpIHtcbiAgICAgICAgY29uc3QgcGxhY2VtZW50V2luZG93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYWNlbWVudC13aW5kb3cnKTtcbiAgICAgICAgaWYgKHBsYWNlbWVudFdpbmRvdykge1xuICAgICAgICAgICAgcGxhY2VtZW50V2luZG93LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLXdpbmRvdycpLmNsYXNzTGlzdC5yZW1vdmUoJ25vbi1pbnRlcmFjdGl2ZScpO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIHBsYXllcidzIGJvYXJkIHdpdGggcGxhY2VkIHNoaXBzXG4gICAgICAgIHVwZGF0ZVBsYXllckJvYXJkKCk7XG4gICAgICAgIG9uRmluaXNoKCk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIHNoaXAgcGxhY2VtZW50IHdpbmRvd1xuICAgIGNyZWF0ZVBsYWNlbWVudFdpbmRvdygpO1xufVxuIiwiLy8gSW1wb3J0IG5lY2Vzc2FyeSBmaWxlcyBhbmQgc3R5bGVzXG5pbXBvcnQgJy4vaW5kZXguaHRtbCc7XG5pbXBvcnQgJy4vc3R5bGUvc3R5bGUuY3NzJztcbmltcG9ydCB7IERvbSB9IGZyb20gJy4vc2NyaXB0cy9Eb20nO1xuLy8gTWFpbiBmdW5jdGlvbiB0byBzdGFydCB0aGUgYXBwbGljYXRpb25cbmZ1bmN0aW9uIG1haW4oKSB7XG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgRE9NIGFuZCBzdGFydCB0aGUgZ2FtZVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbSA9IERvbSgpO1xuICAgICAgICBkb20uc3RhcnRVcCgpO1xuICAgIH0pO1xufVxuLy8gUnVuIHRoZSBtYWluIGZ1bmN0aW9uIHdoZW4gdGhlIHNjcmlwdCBsb2Fkc1xubWFpbigpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsIlNoaXAiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJvcmllbnRhdGlvbiIsInNoaXBMZW5ndGgiLCJudW1iZXJPZkhpdHMiLCJzdW5rIiwiZ2V0TGVuZ3RoIiwiZ2V0TmFtZSIsImdldE51bWJlck9mSGl0cyIsImlzU3VuayIsImdldEhpdCIsImlzVmVydGljYWwiLCJHYW1lYm9hcmQiLCJzaGlwcyIsIkdSSURfU0laRSIsIm51bWJlck9mU2hpcHMiLCJib2FyZCIsIm1pc3NlZFNob3RzIiwiaW5pdGlhbGl6ZSIsImoiLCJwbGFjZVNoaXAiLCJjb2x1bW4iLCJyb3ciLCJwbGFjZXMiLCJpc0NlbGxBdmFpbGFibGUiLCJzaGlwIiwiaXNXaXRoaW5Cb3VuZHMiLCJjaGVja0NvbCIsImNoZWNrUm93IiwiZ2V0U2hpcEF0IiwicmVjZWl2ZUF0dGFjayIsImNvbnNvbGUiLCJsb2ciLCJtYXJrQWRqYWNlbnRDZWxscyIsImRpcmVjdGlvbnMiLCJmb3JFYWNoIiwic2hpcEluZm8iLCJwbGFjZSIsImR4IiwiZHkiLCJhZGpDb2wiLCJhZGpSb3ciLCJnZXRBbGxNaXNzZWRDZWxscyIsIm1pc3NlZENlbGxzIiwiY29sIiwiZ2V0TWlzc2VkU2hvdHMiLCJhbGxTaGlwc1N1bmsiLCJwbGFjZVNoaXBzUmFuZG9tbHkiLCJwbGFjZWQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJFbmVteUFpIiwib3Bwb25lbnRCb2FyZCIsImxhc3RIaXQiLCJwb3RlbnRpYWxUYXJnZXRzIiwiYXR0YWNrZWRDZWxscyIsIlNldCIsIm1ha2VNb3ZlIiwibW92ZSIsInRhcmdldEFkamFjZW50Q2VsbHMiLCJyYW5kb21Nb3ZlIiwiYWRkIiwicG9wIiwiaGFzIiwiYWRkQWRqYWNlbnRDZWxscyIsImFkamFjZW50Q2VsbHMiLCJmaWx0ZXIiLCJEb20iLCJwbGF5ZXJCb2FyZCIsImVuZW15Qm9hcmQiLCJhaVBsYXllciIsImlzUGxheWVyVHVybiIsImNyZWF0ZUdyaWQiLCJjb250YWluZXJJZCIsImdhbWVib2FyZCIsImNvbnRhaW5lciIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiY2xhc3NMaXN0IiwiY2VsbCIsImRhdGFzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlQ2VsbENsaWNrIiwiY29udGFpbnMiLCJpc0hpdCIsInRleHRDb250ZW50IiwidXBkYXRlQ2VsbEFwcGVhcmFuY2UiLCJ1cGRhdGVHcmlkIiwiR2FtZUZpbmFsZSIsInNldFRpbWVvdXQiLCJwbGF5ZXJUdXJuIiwiYWlUdXJuIiwiYWlDb2wiLCJhaVJvdyIsInBsYXllckNlbGwiLCJjZWxscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjcmVhdGVOZXdHYW1lYm9hcmQiLCJnYW1lQ29udGFpbmVyIiwicGxheWVyQm9hcmRDb250YWluZXIiLCJjcmVhdGVCb2FyZENvbnRhaW5lciIsIkVuZW15Qm9hcmRDb250YWluZXIiLCJib2R5Iiwib25GaW5pc2giLCJjdXJyZW50U2hpcEluZGV4IiwiY3VycmVudE9yaWVudGF0aW9uIiwicmVzdGFydCIsInJhbmRvbWl6ZSIsImZpbmlzaFBsYWNlbWVudCIsInJvdGF0ZVNoaXAiLCJjdXJyZW50U2hpcCIsInByZXZpZXdTaGlwIiwiY2xlYXJQcmV2aWV3IiwicHJldmlld1JvdyIsInByZXZpZXdDb2wiLCJpc1ZhbGlkUGxhY2VtZW50IiwicGxhY2VtZW50V2luZG93IiwicGxheWVyQm9hcmRFbGVtZW50IiwidXBkYXRlUGxheWVyQm9hcmQiLCJ0aXRsZSIsImdyaWQiLCJjcmVhdGVQbGFjZW1lbnRHcmlkIiwiY29udHJvbHMiLCJyb3RhdGVCdXR0b24iLCJSYW5kb21CdG4iLCJyZXN0YXJ0QnV0dG9uIiwiY3JlYXRlQ29udHJvbHMiLCJpbnNlcnRCZWZvcmUiLCJjcmVhdGVQbGFjZW1lbnRXaW5kb3ciLCJTaGlwUGxhY2VtZW50V2luZG93IiwiaGVhZGVyIiwidG9Mb3dlckNhc2UiLCJmaW5hbGVSZXN1bHQiLCJhbGVydCIsInBvaW50ZXJFdmVudHMiLCJzdGFydFVwIiwibmV3R2FtZUJ0biIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==